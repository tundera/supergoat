/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { NexusContext as ctx } from './../context'
import type { core } from 'nexus'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void // "DateTime";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void // "Json";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void // "Bytes";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "DateTime";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Json";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Bytes";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Upload";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AccountWhereUniqueInput: {
    // input type
    id: string // String!
  }
  AccuontOrderByInput: {
    // input type
    name: NexusGenEnums['SortOrder'] // SortOrder!
  }
  CoachOrderByInput: {
    // input type
    name: NexusGenEnums['SortOrder'] // SortOrder!
  }
  CoachWhereInput: {
    // input type
    id: string // String!
    name: NexusGenInputs['StringFilter'] // StringFilter!
  }
  CoachWhereUniqueInput: {
    // input type
    id: string // String!
  }
  IntFilter: {
    // input type
    contains: number // Int!
    endsWith: number // Int!
    equals: number // Int!
    gt: number // Int!
    gte: number // Int!
    in: number[] // [Int!]!
    lt: number // Int!
    lte: number // Int!
    notIn: number[] // [Int!]!
    startsWith: number // Int!
  }
  PlayerOrderByInput: {
    // input type
    name: NexusGenEnums['SortOrder'] // SortOrder!
  }
  PlayerWhereInput: {
    // input type
    id: string // String!
    name: NexusGenInputs['StringFilter'] // StringFilter!
  }
  PlayerWhereUniqueInput: {
    // input type
    id: string // String!
  }
  SessionOrderByInput: {
    // input type
    name: NexusGenEnums['SortOrder'] // SortOrder!
  }
  SessionWhereUniqueInput: {
    // input type
    id: string // String!
  }
  StringFilter: {
    // input type
    contains: string // String!
    endsWith: string // String!
    equals: string // String!
    gt: string // String!
    gte: string // String!
    in: string[] // [String!]!
    lt: string // String!
    lte: string // String!
    notIn: string[] // [String!]!
    startsWith: string // String!
  }
  TeamOrderByInput: {
    // input type
    name: NexusGenEnums['SortOrder'] // SortOrder!
  }
  TeamWhereInput: {
    // input type
    id: string // String!
    name: NexusGenInputs['StringFilter'] // StringFilter!
  }
  TeamWhereUniqueInput: {
    // input type
    id: string // String!
  }
  UserOrderByInput: {
    // input type
    name: NexusGenEnums['SortOrder'] // SortOrder!
  }
  UserWhereUniqueInput: {
    // input type
    id: string // String!
  }
}

export interface NexusGenEnums {
  ImageType: 'HEADSHOT' | 'LOGO'
  SortOrder: 'asc' | 'desc'
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Bytes: any
  DateTime: any
  Json: any
  Upload: any
}

export interface NexusGenObjects {
  Account: {
    // root type
    accessToken?: string | null // String
    accessTokenExpires?: NexusGenScalars['DateTime'] | null // DateTime
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    id: string // ID!
    providerAccountId: string // String!
    providerId: string // String!
    providerType: string // String!
    refreshToken?: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    userId: string // String!
  }
  Coach: {
    // root type
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    handle: string // String!
    id: string // ID!
    imageId?: string | null // String
    isAssistant?: string | null // String
    name: string // String!
    teamId?: string | null // String
    type?: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
  }
  ColorScheme: {
    // root type
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    id: string // ID!
    primary: string // String!
    secondary: string // String!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
  }
  Image: {
    // root type
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    id: string // ID!
    type: NexusGenEnums['ImageType'] // ImageType!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    url: string // String!
  }
  Player: {
    // root type
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    handle: string // String!
    height: string // String!
    id: string // ID!
    imageId?: string | null // String
    name: string // String!
    number?: string | null // String
    position?: string | null // String
    slug: string // String!
    teamId?: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    weight: string // String!
  }
  Query: {}
  Session: {
    // root type
    accessToken: string // String!
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    expires: NexusGenScalars['DateTime'] // DateTime!
    id: string // ID!
    sessionToken: string // String!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    userId: string // String!
  }
  Team: {
    // root type
    abbreviation: string // String!
    city: string // String!
    conference: string // String!
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    division: string // String!
    established: string // String!
    handle: string // String!
    id: string // ID!
    losses?: number | null // Int
    name: string // String!
    slug: string // String!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    winPercentage?: number | null // Float
    wins?: number | null // Int
  }
  User: {
    // root type
    apple?: string | null // String
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    email?: string | null // String
    facebook?: string | null // String
    github?: string | null // String
    google?: string | null // String
    id: string // ID!
    image?: string | null // String
    name?: string | null // String
    twitter?: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
  }
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Account: {
    // field return type
    accessToken: string | null // String
    accessTokenExpires: NexusGenScalars['DateTime'] | null // DateTime
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    id: string // ID!
    providerAccountId: string // String!
    providerId: string // String!
    providerType: string // String!
    refreshToken: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    user: NexusGenRootTypes['User'] // User!
    userId: string // String!
  }
  Coach: {
    // field return type
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    handle: string // String!
    id: string // ID!
    image: NexusGenRootTypes['Image'] | null // Image
    imageId: string | null // String
    isAssistant: string | null // String
    name: string // String!
    team: NexusGenRootTypes['Team'] | null // Team
    teamId: string | null // String
    type: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
  }
  ColorScheme: {
    // field return type
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    id: string // ID!
    primary: string // String!
    secondary: string // String!
    team: NexusGenRootTypes['Team'] | null // Team
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
  }
  Image: {
    // field return type
    coach: NexusGenRootTypes['Coach'] | null // Coach
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    id: string // ID!
    player: NexusGenRootTypes['Player'] | null // Player
    team: NexusGenRootTypes['Team'] | null // Team
    type: NexusGenEnums['ImageType'] // ImageType!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    url: string // String!
  }
  Player: {
    // field return type
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    handle: string // String!
    height: string // String!
    id: string // ID!
    image: NexusGenRootTypes['Image'] | null // Image
    imageId: string | null // String
    name: string // String!
    number: string | null // String
    position: string | null // String
    slug: string // String!
    team: NexusGenRootTypes['Team'] | null // Team
    teamId: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    weight: string // String!
  }
  Query: {
    // field return type
    account: NexusGenRootTypes['Account'] | null // Account
    accounts: Array<NexusGenRootTypes['Account'] | null> | null // [Account]
    allCoaches: Array<NexusGenRootTypes['Coach'] | null> | null // [Coach]
    allPlayers: Array<NexusGenRootTypes['Player'] | null> | null // [Player]
    allTeams: Array<NexusGenRootTypes['Team'] | null> | null // [Team]
    coach: NexusGenRootTypes['Coach'] | null // Coach
    colorScheme: NexusGenRootTypes['ColorScheme'] | null // ColorScheme
    colorSchemeByTeam: NexusGenRootTypes['ColorScheme'] | null // ColorScheme
    colorSchemes: Array<NexusGenRootTypes['ColorScheme'] | null> | null // [ColorScheme]
    image: NexusGenRootTypes['Image'] | null // Image
    images: Array<NexusGenRootTypes['Image'] | null> | null // [Image]
    player: NexusGenRootTypes['Player'] | null // Player
    session: NexusGenRootTypes['Session'] | null // Session
    sessions: Array<NexusGenRootTypes['Session'] | null> | null // [Session]
    team: NexusGenRootTypes['Team'] | null // Team
    user: NexusGenRootTypes['User'] | null // User
    users: Array<NexusGenRootTypes['User'] | null> | null // [User]
  }
  Session: {
    // field return type
    accessToken: string // String!
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    expires: NexusGenScalars['DateTime'] // DateTime!
    id: string // ID!
    sessionToken: string // String!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    user: NexusGenRootTypes['User'] // User!
    userId: string // String!
  }
  Team: {
    // field return type
    abbreviation: string // String!
    city: string // String!
    coaches: NexusGenRootTypes['Coach'][] // [Coach!]!
    colorScheme: NexusGenRootTypes['ColorScheme'] | null // ColorScheme
    conference: string // String!
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    division: string // String!
    established: string // String!
    handle: string // String!
    id: string // ID!
    logo: NexusGenRootTypes['Image'] | null // Image
    losses: number | null // Int
    name: string // String!
    players: NexusGenRootTypes['Player'][] // [Player!]!
    slug: string // String!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    winPercentage: number | null // Float
    wins: number | null // Int
  }
  User: {
    // field return type
    accounts: NexusGenRootTypes['Account'][] // [Account!]!
    apple: string | null // String
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    email: string | null // String
    facebook: string | null // String
    github: string | null // String
    google: string | null // String
    id: string // ID!
    image: string | null // String
    name: string | null // String
    sessions: NexusGenRootTypes['Session'][] // [Session!]!
    twitter: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Account: {
    // field return type name
    accessToken: 'String'
    accessTokenExpires: 'DateTime'
    createdAt: 'DateTime'
    id: 'ID'
    providerAccountId: 'String'
    providerId: 'String'
    providerType: 'String'
    refreshToken: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Coach: {
    // field return type name
    createdAt: 'DateTime'
    handle: 'String'
    id: 'ID'
    image: 'Image'
    imageId: 'String'
    isAssistant: 'String'
    name: 'String'
    team: 'Team'
    teamId: 'String'
    type: 'String'
    updatedAt: 'DateTime'
  }
  ColorScheme: {
    // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    primary: 'String'
    secondary: 'String'
    team: 'Team'
    updatedAt: 'DateTime'
  }
  Image: {
    // field return type name
    coach: 'Coach'
    createdAt: 'DateTime'
    id: 'ID'
    player: 'Player'
    team: 'Team'
    type: 'ImageType'
    updatedAt: 'DateTime'
    url: 'String'
  }
  Player: {
    // field return type name
    createdAt: 'DateTime'
    handle: 'String'
    height: 'String'
    id: 'ID'
    image: 'Image'
    imageId: 'String'
    name: 'String'
    number: 'String'
    position: 'String'
    slug: 'String'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
    weight: 'String'
  }
  Query: {
    // field return type name
    account: 'Account'
    accounts: 'Account'
    allCoaches: 'Coach'
    allPlayers: 'Player'
    allTeams: 'Team'
    coach: 'Coach'
    colorScheme: 'ColorScheme'
    colorSchemeByTeam: 'ColorScheme'
    colorSchemes: 'ColorScheme'
    image: 'Image'
    images: 'Image'
    player: 'Player'
    session: 'Session'
    sessions: 'Session'
    team: 'Team'
    user: 'User'
    users: 'User'
  }
  Session: {
    // field return type name
    accessToken: 'String'
    createdAt: 'DateTime'
    expires: 'DateTime'
    id: 'ID'
    sessionToken: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Team: {
    // field return type name
    abbreviation: 'String'
    city: 'String'
    coaches: 'Coach'
    colorScheme: 'ColorScheme'
    conference: 'String'
    createdAt: 'DateTime'
    division: 'String'
    established: 'String'
    handle: 'String'
    id: 'ID'
    logo: 'Image'
    losses: 'Int'
    name: 'String'
    players: 'Player'
    slug: 'String'
    updatedAt: 'DateTime'
    winPercentage: 'Float'
    wins: 'Int'
  }
  User: {
    // field return type name
    accounts: 'Account'
    apple: 'String'
    createdAt: 'DateTime'
    email: 'String'
    facebook: 'String'
    github: 'String'
    google: 'String'
    id: 'ID'
    image: 'String'
    name: 'String'
    sessions: 'Session'
    twitter: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Query: {
    account: {
      // args
      id?: string | null // String
    }
    coach: {
      // args
      id?: string | null // String
    }
    colorScheme: {
      // args
      id?: string | null // String
    }
    colorSchemeByTeam: {
      // args
      id?: string | null // String
    }
    image: {
      // args
      id?: string | null // String
    }
    player: {
      // args
      id?: string | null // String
    }
    session: {
      // args
      id?: string | null // String
    }
    team: {
      // args
      id?: string | null // String
    }
    user: {
      // args
      id?: string | null // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = keyof NexusGenInputs

export type NexusGenEnumNames = keyof NexusGenEnums

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = never

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType = never

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ctx
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
