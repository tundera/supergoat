### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Account {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime!
  id: ID!
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input AccountWhereUniqueInput {
  id: String!
}

input AccuontOrderByInput {
  name: SortOrder!
}

"""
The `Byte` scalar type represents byte value as a Buffer
"""
scalar Bytes

"""
Coach model
"""
type Coach {
  createdAt: DateTime!
  handle: String!
  id: ID!
  image: Image
  imageId: String
  isAssistant: String
  name: String!
  team: Team
  teamId: String
  type: String
  updatedAt: DateTime!
}

input CoachOrderByInput {
  name: SortOrder!
}

input CoachWhereInput {
  id: String!
  name: StringFilter!
}

input CoachWhereUniqueInput {
  id: String!
}

"""
Color scheme model
"""
type ColorScheme {
  createdAt: DateTime!
  id: ID!
  primary: String!
  secondary: String!
  team: Team
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
Image for NBA team, player, or coach
"""
type Image {
  coach: Coach
  createdAt: DateTime!
  id: ID!
  player: Player
  team: Team
  type: ImageType!
  updatedAt: DateTime!
  url: String!
}

enum ImageType {
  HEADSHOT
  LOGO
}

input IntFilter {
  contains: Int!
  endsWith: Int!
  equals: Int!
  gt: Int!
  gte: Int!
  in: [Int!]!
  lt: Int!
  lte: Int!
  notIn: [Int!]!
  startsWith: Int!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
Player model
"""
type Player {
  createdAt: DateTime!
  handle: String!
  height: String!
  id: ID!
  image: Image
  imageId: String
  name: String!
  number: String
  position: String
  slug: String!
  team: Team
  teamId: String
  updatedAt: DateTime!
  weight: String!
}

input PlayerOrderByInput {
  name: SortOrder!
}

input PlayerWhereInput {
  id: String!
  name: StringFilter!
}

input PlayerWhereUniqueInput {
  id: String!
}

type Query {
  account(id: String): Account
  accounts: [Account]
  allCoaches: [Coach]
  allPlayers: [Player]
  allTeams: [Team]
  coach(id: String): Coach
  colorScheme(id: String): ColorScheme
  colorSchemeByTeam(id: String): ColorScheme
  colorSchemes: [ColorScheme]
  image(id: String): Image
  images: [Image]
  player(id: String): Player
  session(id: String): Session
  sessions: [Session]
  team(id: String): Team
  user(id: String): User
  users: [User]
}

type Session {
  accessToken: String!
  createdAt: DateTime!
  expires: DateTime!
  id: ID!
  sessionToken: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input SessionOrderByInput {
  name: SortOrder!
}

input SessionWhereUniqueInput {
  id: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String!
  endsWith: String!
  equals: String!
  gt: String!
  gte: String!
  in: [String!]!
  lt: String!
  lte: String!
  notIn: [String!]!
  startsWith: String!
}

"""
Team model
"""
type Team {
  abbreviation: String!
  city: String!
  coaches: [Coach!]!
  colorScheme: ColorScheme
  conference: String!
  createdAt: DateTime!
  division: String!
  established: String!
  handle: String!
  id: ID!
  logo: Image
  losses: Int
  name: String!
  players: [Player!]!
  slug: String!
  updatedAt: DateTime!
  winPercentage: Float
  wins: Int
}

input TeamOrderByInput {
  name: SortOrder!
}

input TeamWhereInput {
  id: String!
  name: StringFilter!
}

input TeamWhereUniqueInput {
  id: String!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
  accounts: [Account!]!
  apple: String
  createdAt: DateTime!
  email: String
  facebook: String
  github: String
  google: String
  id: ID!
  image: String
  name: String
  sessions: [Session!]!
  twitter: String
  updatedAt: DateTime!
}

input UserOrderByInput {
  name: SortOrder!
}

input UserWhereUniqueInput {
  id: String!
}
