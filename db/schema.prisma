datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

// --------------------------------------

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  apple         String?
  facebook      String?
  github        String?
  google        String?
  twitter       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

/// Coach model
model Coach {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  handle      String   @unique
  name        String   @unique
  type        String?
  isAssistant String?
  teamId      String?
  team        Team?    @relation(fields: [teamId], references: [id])
  imageId     String?
  image       Image?   @relation(fields: [imageId], references: [id])
}

/// Player model
model Player {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  handle    String   @unique
  name      String   @unique
  slug      String   @unique
  height    String
  weight    String
  number    String?
  position  String?
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id])
  imageId   String?
  image     Image?   @relation(fields: [imageId], references: [id])
}

/// Color scheme model
model ColorScheme {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  primary   String
  secondary String
  team      Team?
}

/// Team model
model Team {
  id            String       @id
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  handle        String       @unique
  name          String       @unique
  slug          String       @unique
  city          String
  abbreviation  String       @unique
  wins          Int?
  losses        Int?
  winPercentage Float?
  conference    String
  division      String
  established   String
  coaches       Coach[]
  players       Player[]
  colorSchemeId String?
  colorScheme   ColorScheme? @relation(fields: [colorSchemeId], references: [id])
  logoId        String?
  logo          Image?       @relation(fields: [logoId], references: [id])
}

/// Image for NBA team, player, or coach
model Image {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  url       String    @unique
  type      ImageType
  player    Player?
  coach     Coach?
  team      Team?
}

enum ImageType {
  LOGO
  HEADSHOT
}
