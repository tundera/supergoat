schema {
  query: Query
  mutation: Mutation
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""
The `Byte` scalar type represents byte value as a Buffer
"""
scalar Bytes

"""
An arbitrary-precision Decimal type
"""
scalar Decimal

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String!
  endsWith: String!
  equals: String!
  gt: String!
  gte: String!
  in: [String!]!
  lt: String!
  lte: String!
  notIn: [String!]!
  startsWith: String!
}

input IntFilter {
  contains: Int!
  endsWith: Int!
  equals: Int!
  gt: Int!
  gte: Int!
  in: [Int!]!
  lt: Int!
  lte: Int!
  notIn: [Int!]!
  startsWith: Int!
}

"""
Player model
"""
type Player {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  handle: String!
  name: String!
  slug: String!
  imageId: String
  teamId: String
  height: String!
  weight: String!
  number: String
  position: String
  team: Team
  image: Image
}

"""
Team model
"""
type Team {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  handle: String!
  name: String!
  slug: String!
  city: String!
  abbreviation: String!
  wins: Int
  losses: Int
  winPercentage: Float
  conference: String!
  division: String!
  established: String!
  coaches: [Coach!]!
  players: [Player!]!
  colorScheme: ColorScheme
  logo: Image
}

"""
Coach model
"""
type Coach {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  handle: String!
  imageId: String
  name: String!
  teamId: String
  type: String
  isAssistant: String
  team: Team
  image: Image
}

"""
Color scheme model
"""
type ColorScheme {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  primary: String!
  secondary: String!
  team: Team
}

"""
Image for NBA team, player, or coach
"""
type Image {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  type: ImageType!
  player: Player
  coach: Coach
  team: Team
}

enum ImageType {
  LOGO
  HEADSHOT
}

type User {
  id: ID!
  name: String
  email: String
  image: String
  apple: String
  facebook: String
  github: String
  google: String
  twitter: String
  createdAt: DateTime!
  updatedAt: DateTime!
  accounts: [Account!]!
  sessions: [Session!]!
}

type Session {
  id: ID!
  userId: String!
  expires: DateTime!
  sessionToken: String!
  accessToken: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type Account {
  id: ID!
  userId: String!
  providerType: String!
  providerId: String!
  providerAccountId: String!
  refreshToken: String
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(
    where: AccountWhereInput
    orderBy: [AccountOrderByInput!]
    first: Int
    last: Int
    before: AccountWhereUniqueInput
    after: AccountWhereUniqueInput
  ): [Account!]!
  player(where: PlayerWhereUniqueInput!): Player
  players(
    where: PlayerWhereInput
    orderBy: [PlayerOrderByInput!]
    first: Int
    last: Int
    before: PlayerWhereUniqueInput
    after: PlayerWhereUniqueInput
  ): [Player!]!
  team(where: TeamWhereUniqueInput!): Team
  teams(
    where: TeamWhereInput
    orderBy: [TeamOrderByInput!]
    first: Int
    last: Int
    before: TeamWhereUniqueInput
    after: TeamWhereUniqueInput
  ): [Team!]!
  coach(where: CoachWhereUniqueInput!): Coach
  coaches(
    where: CoachWhereInput
    orderBy: [CoachOrderByInput!]
    first: Int
    last: Int
    before: CoachWhereUniqueInput
    after: CoachWhereUniqueInput
  ): [Coach!]!
  colorScheme(where: ColorSchemeWhereUniqueInput!): ColorScheme
  colorSchemes(
    where: ColorSchemeWhereInput
    orderBy: [ColorSchemeOrderByInput!]
    first: Int
    last: Int
    before: ColorSchemeWhereUniqueInput
    after: ColorSchemeWhereUniqueInput
  ): [ColorScheme!]!
  image(where: ImageWhereUniqueInput!): Image
  images(
    where: ImageWhereInput
    orderBy: [ImageOrderByInput!]
    first: Int
    last: Int
    before: ImageWhereUniqueInput
    after: ImageWhereUniqueInput
  ): [Image!]!
  user(where: UserWhereUniqueInput!): User
  users(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    first: Int
    last: Int
    before: UserWhereUniqueInput
    after: UserWhereUniqueInput
  ): [User!]!
  session(where: SessionWhereUniqueInput!): Session
  sessions(
    where: SessionWhereInput
    orderBy: [SessionOrderByInput!]
    first: Int
    last: Int
    before: SessionWhereUniqueInput
    after: SessionWhereUniqueInput
  ): [Session!]!
}

input PlayerWhereUniqueInput {
  id: String
  handle: String
  name: String
  slug: String
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  handle: StringFilter
  name: StringFilter
  slug: StringFilter
  height: StringFilter
  weight: StringFilter
  number: StringNullableFilter
  position: StringNullableFilter
  teamId: StringNullableFilter
  team: TeamWhereInput
  imageId: StringNullableFilter
  image: ImageWhereInput
}

input PlayerOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  handle: SortOrder
  name: SortOrder
  slug: SortOrder
  height: SortOrder
  weight: SortOrder
  number: SortOrder
  position: SortOrder
  teamId: SortOrder
  imageId: SortOrder
}

input TeamWhereUniqueInput {
  id: String
  handle: String
  name: String
  slug: String
  abbreviation: String
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  handle: StringFilter
  name: StringFilter
  slug: StringFilter
  city: StringFilter
  abbreviation: StringFilter
  wins: IntNullableFilter
  losses: IntNullableFilter
  winPercentage: FloatNullableFilter
  conference: StringFilter
  division: StringFilter
  established: StringFilter
  coaches: CoachListRelationFilter
  players: PlayerListRelationFilter
  colorSchemeId: StringNullableFilter
  colorScheme: ColorSchemeWhereInput
  logoId: StringNullableFilter
  logo: ImageWhereInput
}

input TeamOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  handle: SortOrder
  name: SortOrder
  slug: SortOrder
  city: SortOrder
  abbreviation: SortOrder
  wins: SortOrder
  losses: SortOrder
  winPercentage: SortOrder
  conference: SortOrder
  division: SortOrder
  established: SortOrder
  colorSchemeId: SortOrder
  logoId: SortOrder
}

input TeamCreateInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  slug: String!
  city: String!
  abbreviation: String!
  wins: Int
  losses: Int
  winPercentage: Float
  conference: String!
  division: String!
  established: String!
  coaches: CoachCreateNestedManyWithoutTeamInput
  players: PlayerCreateNestedManyWithoutTeamInput
  colorScheme: ColorSchemeCreateNestedOneWithoutTeamInput
  logo: ImageCreateNestedOneWithoutTeamInput
}

input TeamUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  abbreviation: StringFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  coaches: CoachUpdateManyWithoutTeamInput
  players: PlayerUpdateManyWithoutTeamInput
  colorScheme: ColorSchemeUpdateOneWithoutTeamInput
  logo: ImageUpdateOneWithoutTeamInput
}

input CoachWhereUniqueInput {
  id: String
  handle: String
  name: String
}

input CoachWhereInput {
  AND: [CoachWhereInput!]
  OR: [CoachWhereInput!]
  NOT: [CoachWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  handle: StringFilter
  name: StringFilter
  type: StringNullableFilter
  isAssistant: StringNullableFilter
  teamId: StringNullableFilter
  team: TeamWhereInput
  imageId: StringNullableFilter
  image: ImageWhereInput
}

input CoachOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  handle: SortOrder
  name: SortOrder
  type: SortOrder
  isAssistant: SortOrder
  teamId: SortOrder
  imageId: SortOrder
}

input ColorSchemeWhereUniqueInput {
  id: String
}

input ColorSchemeWhereInput {
  AND: [ColorSchemeWhereInput!]
  OR: [ColorSchemeWhereInput!]
  NOT: [ColorSchemeWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  primary: StringFilter
  secondary: StringFilter
  team: TeamWhereInput
}

input ColorSchemeOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  primary: SortOrder
  secondary: SortOrder
}

input ImageWhereUniqueInput {
  id: String
  url: String
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  url: StringFilter
  type: EnumImageTypeFilter
  player: PlayerWhereInput
  coach: CoachWhereInput
  team: TeamWhereInput
}

input ImageOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  url: SortOrder
  type: SortOrder
}

input UserWhereUniqueInput {
  id: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  name: StringNullableFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  image: StringNullableFilter
  apple: StringNullableFilter
  facebook: StringNullableFilter
  github: StringNullableFilter
  google: StringNullableFilter
  twitter: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  accounts: AccountListRelationFilter
  sessions: SessionListRelationFilter
}

input UserOrderByInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  image: SortOrder
  apple: SortOrder
  facebook: SortOrder
  github: SortOrder
  google: SortOrder
  twitter: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SessionWhereUniqueInput {
  id: String
  sessionToken: String
  accessToken: String
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: StringFilter
  userId: StringFilter
  expires: DateTimeFilter
  sessionToken: StringFilter
  accessToken: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input SessionOrderByInput {
  id: SortOrder
  userId: SortOrder
  expires: SortOrder
  sessionToken: SortOrder
  accessToken: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AccountWhereUniqueInput {
  id: String
  providerId_providerAccountId: AccountProviderIdProviderAccountIdCompoundUniqueInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: StringFilter
  userId: StringFilter
  providerType: StringFilter
  providerId: StringFilter
  providerAccountId: StringFilter
  refreshToken: StringNullableFilter
  accessToken: StringNullableFilter
  accessTokenExpires: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input AccountOrderByInput {
  id: SortOrder
  userId: SortOrder
  providerType: SortOrder
  providerId: SortOrder
  providerAccountId: SortOrder
  refreshToken: SortOrder
  accessToken: SortOrder
  accessTokenExpires: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input CoachListRelationFilter {
  every: CoachWhereInput
  some: CoachWhereInput
  none: CoachWhereInput
}

input PlayerListRelationFilter {
  every: PlayerWhereInput
  some: PlayerWhereInput
  none: PlayerWhereInput
}

input CoachCreateNestedManyWithoutTeamInput {
  create: [CoachCreateWithoutTeamInput!]
  connectOrCreate: [CoachCreateOrConnectWithoutTeamInput!]
  createMany: CoachCreateManyTeamInputEnvelope
  connect: [CoachWhereUniqueInput!]
}

input PlayerCreateNestedManyWithoutTeamInput {
  create: [PlayerCreateWithoutTeamInput!]
  connectOrCreate: [PlayerCreateOrConnectWithoutTeamInput!]
  createMany: PlayerCreateManyTeamInputEnvelope
  connect: [PlayerWhereUniqueInput!]
}

input ColorSchemeCreateNestedOneWithoutTeamInput {
  create: ColorSchemeCreateWithoutTeamInput
  connectOrCreate: ColorSchemeCreateOrConnectWithoutTeamInput
  connect: ColorSchemeWhereUniqueInput
}

input ImageCreateNestedOneWithoutTeamInput {
  create: ImageCreateWithoutTeamInput
  connectOrCreate: ImageCreateOrConnectWithoutTeamInput
  connect: ImageWhereUniqueInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableFloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input CoachUpdateManyWithoutTeamInput {
  create: [CoachCreateWithoutTeamInput!]
  connectOrCreate: [CoachCreateOrConnectWithoutTeamInput!]
  upsert: [CoachUpsertWithWhereUniqueWithoutTeamInput!]
  createMany: CoachCreateManyTeamInputEnvelope
  connect: [CoachWhereUniqueInput!]
  set: [CoachWhereUniqueInput!]
  disconnect: [CoachWhereUniqueInput!]
  delete: [CoachWhereUniqueInput!]
  update: [CoachUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [CoachUpdateManyWithWhereWithoutTeamInput!]
  deleteMany: [CoachScalarWhereInput!]
}

input PlayerUpdateManyWithoutTeamInput {
  create: [PlayerCreateWithoutTeamInput!]
  connectOrCreate: [PlayerCreateOrConnectWithoutTeamInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutTeamInput!]
  createMany: PlayerCreateManyTeamInputEnvelope
  connect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  delete: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [PlayerUpdateManyWithWhereWithoutTeamInput!]
  deleteMany: [PlayerScalarWhereInput!]
}

input ColorSchemeUpdateOneWithoutTeamInput {
  create: ColorSchemeCreateWithoutTeamInput
  connectOrCreate: ColorSchemeCreateOrConnectWithoutTeamInput
  upsert: ColorSchemeUpsertWithoutTeamInput
  connect: ColorSchemeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ColorSchemeUpdateWithoutTeamInput
}

input ImageUpdateOneWithoutTeamInput {
  create: ImageCreateWithoutTeamInput
  connectOrCreate: ImageCreateOrConnectWithoutTeamInput
  upsert: ImageUpsertWithoutTeamInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ImageUpdateWithoutTeamInput
}

input EnumImageTypeFilter {
  equals: ImageType
  in: [ImageType!]
  notIn: [ImageType!]
  not: NestedEnumImageTypeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input AccountListRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input SessionListRelationFilter {
  every: SessionWhereInput
  some: SessionWhereInput
  none: SessionWhereInput
}

input AccountProviderIdProviderAccountIdCompoundUniqueInput {
  providerId: String!
  providerAccountId: String!
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input CoachCreateWithoutTeamInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  type: String
  isAssistant: String
  image: ImageCreateNestedOneWithoutCoachInput
}

input CoachCreateOrConnectWithoutTeamInput {
  where: CoachWhereUniqueInput!
  create: CoachCreateWithoutTeamInput!
}

input CoachCreateManyTeamInputEnvelope {
  data: [CoachCreateManyTeamInput!]
  skipDuplicates: Boolean
}

input PlayerCreateWithoutTeamInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  slug: String!
  height: String!
  weight: String!
  number: String
  position: String
  image: ImageCreateNestedOneWithoutPlayerInput
}

input PlayerCreateOrConnectWithoutTeamInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutTeamInput!
}

input PlayerCreateManyTeamInputEnvelope {
  data: [PlayerCreateManyTeamInput!]
  skipDuplicates: Boolean
}

input ColorSchemeCreateWithoutTeamInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  primary: String!
  secondary: String!
}

input ColorSchemeCreateOrConnectWithoutTeamInput {
  where: ColorSchemeWhereUniqueInput!
  create: ColorSchemeCreateWithoutTeamInput!
}

input ImageCreateWithoutTeamInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  url: String!
  type: ImageType!
  player: PlayerCreateNestedOneWithoutImageInput
  coach: CoachCreateNestedOneWithoutImageInput
}

input ImageCreateOrConnectWithoutTeamInput {
  where: ImageWhereUniqueInput!
  create: ImageCreateWithoutTeamInput!
}

input CoachUpsertWithWhereUniqueWithoutTeamInput {
  where: CoachWhereUniqueInput!
  update: CoachUpdateWithoutTeamInput!
  create: CoachCreateWithoutTeamInput!
}

input CoachUpdateWithWhereUniqueWithoutTeamInput {
  where: CoachWhereUniqueInput!
  data: CoachUpdateWithoutTeamInput!
}

input CoachUpdateManyWithWhereWithoutTeamInput {
  where: CoachScalarWhereInput!
  data: CoachUpdateManyMutationInput!
}

input CoachScalarWhereInput {
  AND: [CoachScalarWhereInput!]
  OR: [CoachScalarWhereInput!]
  NOT: [CoachScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  handle: StringFilter
  name: StringFilter
  type: StringNullableFilter
  isAssistant: StringNullableFilter
  teamId: StringNullableFilter
  imageId: StringNullableFilter
}

input PlayerUpsertWithWhereUniqueWithoutTeamInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutTeamInput!
  create: PlayerCreateWithoutTeamInput!
}

input PlayerUpdateWithWhereUniqueWithoutTeamInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutTeamInput!
}

input PlayerUpdateManyWithWhereWithoutTeamInput {
  where: PlayerScalarWhereInput!
  data: PlayerUpdateManyMutationInput!
}

input PlayerScalarWhereInput {
  AND: [PlayerScalarWhereInput!]
  OR: [PlayerScalarWhereInput!]
  NOT: [PlayerScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  handle: StringFilter
  name: StringFilter
  slug: StringFilter
  height: StringFilter
  weight: StringFilter
  number: StringNullableFilter
  position: StringNullableFilter
  teamId: StringNullableFilter
  imageId: StringNullableFilter
}

input ColorSchemeUpsertWithoutTeamInput {
  update: ColorSchemeUpdateWithoutTeamInput!
  create: ColorSchemeCreateWithoutTeamInput!
}

input ColorSchemeUpdateWithoutTeamInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  primary: StringFieldUpdateOperationsInput
  secondary: StringFieldUpdateOperationsInput
}

input ImageUpsertWithoutTeamInput {
  update: ImageUpdateWithoutTeamInput!
  create: ImageCreateWithoutTeamInput!
}

input ImageUpdateWithoutTeamInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumImageTypeFieldUpdateOperationsInput
  player: PlayerUpdateOneWithoutImageInput
  coach: CoachUpdateOneWithoutImageInput
}

input NestedEnumImageTypeFilter {
  equals: ImageType
  in: [ImageType!]
  notIn: [ImageType!]
  not: NestedEnumImageTypeFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input ImageCreateNestedOneWithoutCoachInput {
  create: ImageCreateWithoutCoachInput
  connectOrCreate: ImageCreateOrConnectWithoutCoachInput
  connect: ImageWhereUniqueInput
}

input CoachCreateManyTeamInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  type: String
  isAssistant: String
  imageId: String
}

input ImageCreateNestedOneWithoutPlayerInput {
  create: ImageCreateWithoutPlayerInput
  connectOrCreate: ImageCreateOrConnectWithoutPlayerInput
  connect: ImageWhereUniqueInput
}

input PlayerCreateManyTeamInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  slug: String!
  height: String!
  weight: String!
  number: String
  position: String
  imageId: String
}

input PlayerCreateNestedOneWithoutImageInput {
  create: PlayerCreateWithoutImageInput
  connectOrCreate: PlayerCreateOrConnectWithoutImageInput
  connect: PlayerWhereUniqueInput
}

input CoachCreateNestedOneWithoutImageInput {
  create: CoachCreateWithoutImageInput
  connectOrCreate: CoachCreateOrConnectWithoutImageInput
  connect: CoachWhereUniqueInput
}

input CoachUpdateWithoutTeamInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  image: ImageUpdateOneWithoutCoachInput
}

input CoachUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
}

input PlayerUpdateWithoutTeamInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  image: ImageUpdateOneWithoutPlayerInput
}

input PlayerUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
}

input EnumImageTypeFieldUpdateOperationsInput {
  set: ImageType
}

input PlayerUpdateOneWithoutImageInput {
  create: PlayerCreateWithoutImageInput
  connectOrCreate: PlayerCreateOrConnectWithoutImageInput
  upsert: PlayerUpsertWithoutImageInput
  connect: PlayerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PlayerUpdateWithoutImageInput
}

input CoachUpdateOneWithoutImageInput {
  create: CoachCreateWithoutImageInput
  connectOrCreate: CoachCreateOrConnectWithoutImageInput
  upsert: CoachUpsertWithoutImageInput
  connect: CoachWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CoachUpdateWithoutImageInput
}

input ImageCreateWithoutCoachInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  url: String!
  type: ImageType!
  player: PlayerCreateNestedOneWithoutImageInput
  team: TeamCreateNestedOneWithoutLogoInput
}

input ImageCreateOrConnectWithoutCoachInput {
  where: ImageWhereUniqueInput!
  create: ImageCreateWithoutCoachInput!
}

input ImageCreateWithoutPlayerInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  url: String!
  type: ImageType!
  coach: CoachCreateNestedOneWithoutImageInput
  team: TeamCreateNestedOneWithoutLogoInput
}

input ImageCreateOrConnectWithoutPlayerInput {
  where: ImageWhereUniqueInput!
  create: ImageCreateWithoutPlayerInput!
}

input PlayerCreateWithoutImageInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  slug: String!
  height: String!
  weight: String!
  number: String
  position: String
  team: TeamCreateNestedOneWithoutPlayersInput
}

input PlayerCreateOrConnectWithoutImageInput {
  where: PlayerWhereUniqueInput!
  create: PlayerCreateWithoutImageInput!
}

input CoachCreateWithoutImageInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  type: String
  isAssistant: String
  team: TeamCreateNestedOneWithoutCoachesInput
}

input CoachCreateOrConnectWithoutImageInput {
  where: CoachWhereUniqueInput!
  create: CoachCreateWithoutImageInput!
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input ImageUpdateOneWithoutCoachInput {
  create: ImageCreateWithoutCoachInput
  connectOrCreate: ImageCreateOrConnectWithoutCoachInput
  upsert: ImageUpsertWithoutCoachInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ImageUpdateWithoutCoachInput
}

input ImageUpdateOneWithoutPlayerInput {
  create: ImageCreateWithoutPlayerInput
  connectOrCreate: ImageCreateOrConnectWithoutPlayerInput
  upsert: ImageUpsertWithoutPlayerInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ImageUpdateWithoutPlayerInput
}

input PlayerUpsertWithoutImageInput {
  update: PlayerUpdateWithoutImageInput!
  create: PlayerCreateWithoutImageInput!
}

input PlayerUpdateWithoutImageInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutPlayersInput
}

input CoachUpsertWithoutImageInput {
  update: CoachUpdateWithoutImageInput!
  create: CoachCreateWithoutImageInput!
}

input CoachUpdateWithoutImageInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutCoachesInput
}

input TeamCreateNestedOneWithoutLogoInput {
  create: TeamCreateWithoutLogoInput
  connectOrCreate: TeamCreateOrConnectWithoutLogoInput
  connect: TeamWhereUniqueInput
}

input TeamCreateNestedOneWithoutPlayersInput {
  create: TeamCreateWithoutPlayersInput
  connectOrCreate: TeamCreateOrConnectWithoutPlayersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateNestedOneWithoutCoachesInput {
  create: TeamCreateWithoutCoachesInput
  connectOrCreate: TeamCreateOrConnectWithoutCoachesInput
  connect: TeamWhereUniqueInput
}

input ImageUpsertWithoutCoachInput {
  update: ImageUpdateWithoutCoachInput!
  create: ImageCreateWithoutCoachInput!
}

input ImageUpdateWithoutCoachInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumImageTypeFieldUpdateOperationsInput
  player: PlayerUpdateOneWithoutImageInput
  team: TeamUpdateOneWithoutLogoInput
}

input ImageUpsertWithoutPlayerInput {
  update: ImageUpdateWithoutPlayerInput!
  create: ImageCreateWithoutPlayerInput!
}

input ImageUpdateWithoutPlayerInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  type: EnumImageTypeFieldUpdateOperationsInput
  coach: CoachUpdateOneWithoutImageInput
  team: TeamUpdateOneWithoutLogoInput
}

input TeamUpdateOneWithoutPlayersInput {
  create: TeamCreateWithoutPlayersInput
  connectOrCreate: TeamCreateOrConnectWithoutPlayersInput
  upsert: TeamUpsertWithoutPlayersInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateWithoutPlayersInput
}

input TeamUpdateOneWithoutCoachesInput {
  create: TeamCreateWithoutCoachesInput
  connectOrCreate: TeamCreateOrConnectWithoutCoachesInput
  upsert: TeamUpsertWithoutCoachesInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateWithoutCoachesInput
}

input TeamCreateWithoutLogoInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  slug: String!
  city: String!
  abbreviation: String!
  wins: Int
  losses: Int
  winPercentage: Float
  conference: String!
  division: String!
  established: String!
  coaches: CoachCreateNestedManyWithoutTeamInput
  players: PlayerCreateNestedManyWithoutTeamInput
  colorScheme: ColorSchemeCreateNestedOneWithoutTeamInput
}

input TeamCreateOrConnectWithoutLogoInput {
  where: TeamWhereUniqueInput!
  create: TeamCreateWithoutLogoInput!
}

input TeamCreateWithoutPlayersInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  slug: String!
  city: String!
  abbreviation: String!
  wins: Int
  losses: Int
  winPercentage: Float
  conference: String!
  division: String!
  established: String!
  coaches: CoachCreateNestedManyWithoutTeamInput
  colorScheme: ColorSchemeCreateNestedOneWithoutTeamInput
  logo: ImageCreateNestedOneWithoutTeamInput
}

input TeamCreateOrConnectWithoutPlayersInput {
  where: TeamWhereUniqueInput!
  create: TeamCreateWithoutPlayersInput!
}

input TeamCreateWithoutCoachesInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  name: String!
  slug: String!
  city: String!
  abbreviation: String!
  wins: Int
  losses: Int
  winPercentage: Float
  conference: String!
  division: String!
  established: String!
  players: PlayerCreateNestedManyWithoutTeamInput
  colorScheme: ColorSchemeCreateNestedOneWithoutTeamInput
  logo: ImageCreateNestedOneWithoutTeamInput
}

input TeamCreateOrConnectWithoutCoachesInput {
  where: TeamWhereUniqueInput!
  create: TeamCreateWithoutCoachesInput!
}

input TeamUpdateOneWithoutLogoInput {
  create: TeamCreateWithoutLogoInput
  connectOrCreate: TeamCreateOrConnectWithoutLogoInput
  upsert: TeamUpsertWithoutLogoInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateWithoutLogoInput
}

input TeamUpsertWithoutPlayersInput {
  update: TeamUpdateWithoutPlayersInput!
  create: TeamCreateWithoutPlayersInput!
}

input TeamUpdateWithoutPlayersInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  abbreviation: StringFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  coaches: CoachUpdateManyWithoutTeamInput
  colorScheme: ColorSchemeUpdateOneWithoutTeamInput
  logo: ImageUpdateOneWithoutTeamInput
}

input TeamUpsertWithoutCoachesInput {
  update: TeamUpdateWithoutCoachesInput!
  create: TeamCreateWithoutCoachesInput!
}

input TeamUpdateWithoutCoachesInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  abbreviation: StringFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  players: PlayerUpdateManyWithoutTeamInput
  colorScheme: ColorSchemeUpdateOneWithoutTeamInput
  logo: ImageUpdateOneWithoutTeamInput
}

input TeamUpsertWithoutLogoInput {
  update: TeamUpdateWithoutLogoInput!
  create: TeamCreateWithoutLogoInput!
}

input TeamUpdateWithoutLogoInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  abbreviation: StringFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  coaches: CoachUpdateManyWithoutTeamInput
  players: PlayerUpdateManyWithoutTeamInput
  colorScheme: ColorSchemeUpdateOneWithoutTeamInput
}

type Mutation {
  createOneTeam(data: TeamCreateInput!): Team!
  updateOneTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
}
