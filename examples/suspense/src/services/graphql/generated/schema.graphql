### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Account {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime!
  id: String!
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type AccountCountAggregateOutputType {
  _all: Int!
  accessToken: Int!
  accessTokenExpires: Int!
  createdAt: Int!
  id: Int!
  providerAccountId: Int!
  providerId: Int!
  providerType: Int!
  refreshToken: Int!
  updatedAt: Int!
  userId: Int!
}

input AccountCreateInput {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime
  userId: String!
}

input AccountCreateManyUserInput {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime
}

input AccountCreateManyUserInputEnvelope {
  data: AccountCreateManyUserInput!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput]
  create: [AccountCreateWithoutUserInput]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountUncheckedCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregateOutputType {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String
  providerId: String
  providerType: String
  refreshToken: String
  updatedAt: DateTime
  userId: String
}

type AccountMinAggregateOutputType {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String
  providerId: String
  providerType: String
  refreshToken: String
  updatedAt: DateTime
  userId: String
}

input AccountOrderByInput {
  accessToken: SortOrder
  accessTokenExpires: SortOrder
  createdAt: SortOrder
  id: SortOrder
  providerAccountId: SortOrder
  providerId: SortOrder
  providerType: SortOrder
  refreshToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountProviderIdProviderAccountIdCompoundUniqueInput {
  providerAccountId: String!
  providerId: String!
}

enum AccountScalarFieldEnum {
  accessToken
  accessTokenExpires
  createdAt
  id
  providerAccountId
  providerId
  providerType
  refreshToken
  updatedAt
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput]
  NOT: [AccountScalarWhereInput]
  OR: [AccountScalarWhereInput]
  accessToken: StringNullableFilter
  accessTokenExpires: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  providerAccountId: StringFilter
  providerId: StringFilter
  providerType: StringFilter
  refreshToken: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput]
  NOT: [AccountScalarWhereWithAggregatesInput]
  OR: [AccountScalarWhereWithAggregatesInput]
  accessToken: StringNullableWithAggregatesFilter
  accessTokenExpires: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  providerId: StringWithAggregatesFilter
  providerType: StringWithAggregatesFilter
  refreshToken: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input AccountUncheckedCreateInput {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime
  userId: String!
}

input AccountUncheckedCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput]
  create: [AccountCreateWithoutUserInput]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountUncheckedCreateWithoutUserInput {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime
}

input AccountUncheckedUpdateInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input AccountUncheckedUpdateManyInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input AccountUncheckedUpdateManyWithoutAccountsInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUncheckedUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput]
  create: [AccountCreateWithoutUserInput]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput]
  deleteMany: [AccountScalarWhereInput]
  disconnect: [AccountWhereUniqueInput]
  set: [AccountWhereUniqueInput]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput]
}

input AccountUncheckedUpdateWithoutUserInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsInput
}

input AccountUpdateManyMutationInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUncheckedUpdateManyWithoutAccountsInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput]
  create: [AccountCreateWithoutUserInput]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput]
  deleteMany: [AccountScalarWhereInput]
  disconnect: [AccountWhereUniqueInput]
  set: [AccountWhereUniqueInput]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUncheckedUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountUncheckedCreateWithoutUserInput!
  update: AccountUncheckedUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput]
  NOT: [AccountWhereInput]
  OR: [AccountWhereInput]
  accessToken: StringNullableFilter
  accessTokenExpires: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  providerAccountId: StringFilter
  providerId: StringFilter
  providerType: StringFilter
  refreshToken: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  providerId_providerAccountId: AccountProviderIdProviderAccountIdCompoundUniqueInput
}

type AggregateAccount {
  _count: AccountCountAggregateOutputType
  _max: AccountMaxAggregateOutputType
  _min: AccountMinAggregateOutputType
  count: AccountCountAggregateOutputType
  max: AccountMaxAggregateOutputType
  min: AccountMinAggregateOutputType
}

type AggregateCoach {
  _count: CoachCountAggregateOutputType
  _max: CoachMaxAggregateOutputType
  _min: CoachMinAggregateOutputType
  count: CoachCountAggregateOutputType
  max: CoachMaxAggregateOutputType
  min: CoachMinAggregateOutputType
}

type AggregateColorScheme {
  _count: ColorSchemeCountAggregateOutputType
  _max: ColorSchemeMaxAggregateOutputType
  _min: ColorSchemeMinAggregateOutputType
  count: ColorSchemeCountAggregateOutputType
  max: ColorSchemeMaxAggregateOutputType
  min: ColorSchemeMinAggregateOutputType
}

type AggregateImage {
  _count: ImageCountAggregateOutputType
  _max: ImageMaxAggregateOutputType
  _min: ImageMinAggregateOutputType
  count: ImageCountAggregateOutputType
  max: ImageMaxAggregateOutputType
  min: ImageMinAggregateOutputType
}

type AggregatePlayer {
  _count: PlayerCountAggregateOutputType
  _max: PlayerMaxAggregateOutputType
  _min: PlayerMinAggregateOutputType
  count: PlayerCountAggregateOutputType
  max: PlayerMaxAggregateOutputType
  min: PlayerMinAggregateOutputType
}

type AggregateSession {
  _count: SessionCountAggregateOutputType
  _max: SessionMaxAggregateOutputType
  _min: SessionMinAggregateOutputType
  count: SessionCountAggregateOutputType
  max: SessionMaxAggregateOutputType
  min: SessionMinAggregateOutputType
}

type AggregateTeam {
  _avg: TeamAvgAggregateOutputType
  _count: TeamCountAggregateOutputType
  _max: TeamMaxAggregateOutputType
  _min: TeamMinAggregateOutputType
  _sum: TeamSumAggregateOutputType
  avg: TeamAvgAggregateOutputType
  count: TeamCountAggregateOutputType
  max: TeamMaxAggregateOutputType
  min: TeamMinAggregateOutputType
  sum: TeamSumAggregateOutputType
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
  count: UserCountAggregateOutputType
  max: UserMaxAggregateOutputType
  min: UserMinAggregateOutputType
}

type AggregateVerificationRequest {
  _count: VerificationRequestCountAggregateOutputType
  _max: VerificationRequestMaxAggregateOutputType
  _min: VerificationRequestMinAggregateOutputType
  count: VerificationRequestCountAggregateOutputType
  max: VerificationRequestMaxAggregateOutputType
  min: VerificationRequestMinAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""
BigInt custom scalar type
"""
scalar BigInt

"""
Coach model
"""
type Coach {
  createdAt: DateTime!
  handle: String!
  id: String!
  image: Image
  imageId: String
  isAssistant: String
  name: String!
  team: Team
  teamId: String
  type: String
  updatedAt: DateTime!
}

type CoachCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  handle: Int!
  id: Int!
  imageId: Int!
  isAssistant: Int!
  name: Int!
  teamId: Int!
  type: Int!
  updatedAt: Int!
}

input CoachCreateInput {
  createdAt: DateTime
  handle: String!
  id: String!
  image: ImageCreateNestedOneWithoutCoachInput
  isAssistant: String
  name: String!
  team: TeamCreateNestedOneWithoutCoachesInput
  type: String
  updatedAt: DateTime
}

input CoachCreateManyInput {
  createdAt: DateTime
  handle: String!
  id: String!
  imageId: String
  isAssistant: String
  name: String!
  teamId: String
  type: String
  updatedAt: DateTime
}

input CoachCreateManyTeamInput {
  createdAt: DateTime
  handle: String!
  id: String!
  imageId: String
  isAssistant: String
  name: String!
  type: String
  updatedAt: DateTime
}

input CoachCreateManyTeamInputEnvelope {
  data: CoachCreateManyTeamInput!
  skipDuplicates: Boolean
}

input CoachCreateNestedManyWithoutTeamInput {
  connect: [CoachWhereUniqueInput]
  connectOrCreate: [CoachCreateOrConnectWithoutTeamInput]
  create: [CoachCreateWithoutTeamInput]
  createMany: CoachCreateManyTeamInputEnvelope
}

input CoachCreateNestedOneWithoutImageInput {
  connect: CoachWhereUniqueInput
  connectOrCreate: CoachCreateOrConnectWithoutImageInput
  create: CoachUncheckedCreateWithoutImageInput
}

input CoachCreateOrConnectWithoutImageInput {
  create: CoachUncheckedCreateWithoutImageInput!
  where: CoachWhereUniqueInput!
}

input CoachCreateOrConnectWithoutTeamInput {
  create: CoachUncheckedCreateWithoutTeamInput!
  where: CoachWhereUniqueInput!
}

input CoachCreateWithoutImageInput {
  createdAt: DateTime
  handle: String!
  id: String!
  isAssistant: String
  name: String!
  team: TeamCreateNestedOneWithoutCoachesInput
  type: String
  updatedAt: DateTime
}

input CoachCreateWithoutTeamInput {
  createdAt: DateTime
  handle: String!
  id: String!
  image: ImageCreateNestedOneWithoutCoachInput
  isAssistant: String
  name: String!
  type: String
  updatedAt: DateTime
}

input CoachListRelationFilter {
  every: CoachWhereInput
  none: CoachWhereInput
  some: CoachWhereInput
}

type CoachMaxAggregateOutputType {
  createdAt: DateTime
  handle: String
  id: String
  imageId: String
  isAssistant: String
  name: String
  teamId: String
  type: String
  updatedAt: DateTime
}

type CoachMinAggregateOutputType {
  createdAt: DateTime
  handle: String
  id: String
  imageId: String
  isAssistant: String
  name: String
  teamId: String
  type: String
  updatedAt: DateTime
}

input CoachOrderByInput {
  createdAt: SortOrder
  handle: SortOrder
  id: SortOrder
  imageId: SortOrder
  isAssistant: SortOrder
  name: SortOrder
  teamId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input CoachRelationFilter {
  is: CoachWhereInput
  isNot: CoachWhereInput
}

enum CoachScalarFieldEnum {
  createdAt
  handle
  id
  imageId
  isAssistant
  name
  teamId
  type
  updatedAt
}

input CoachScalarWhereInput {
  AND: [CoachScalarWhereInput]
  NOT: [CoachScalarWhereInput]
  OR: [CoachScalarWhereInput]
  createdAt: DateTimeFilter
  handle: StringFilter
  id: StringFilter
  imageId: StringNullableFilter
  isAssistant: StringNullableFilter
  name: StringFilter
  teamId: StringNullableFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
}

input CoachScalarWhereWithAggregatesInput {
  AND: [CoachScalarWhereWithAggregatesInput]
  NOT: [CoachScalarWhereWithAggregatesInput]
  OR: [CoachScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  handle: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  imageId: StringNullableWithAggregatesFilter
  isAssistant: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  teamId: StringNullableWithAggregatesFilter
  type: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CoachUncheckedCreateInput {
  createdAt: DateTime
  handle: String!
  id: String!
  imageId: String
  isAssistant: String
  name: String!
  teamId: String
  type: String
  updatedAt: DateTime
}

input CoachUncheckedCreateNestedManyWithoutTeamInput {
  connect: [CoachWhereUniqueInput]
  connectOrCreate: [CoachCreateOrConnectWithoutTeamInput]
  create: [CoachCreateWithoutTeamInput]
  createMany: CoachCreateManyTeamInputEnvelope
}

input CoachUncheckedCreateNestedOneWithoutImageInput {
  connect: CoachWhereUniqueInput
  connectOrCreate: CoachCreateOrConnectWithoutImageInput
  create: CoachUncheckedCreateWithoutImageInput
}

input CoachUncheckedCreateWithoutImageInput {
  createdAt: DateTime
  handle: String!
  id: String!
  isAssistant: String
  name: String!
  teamId: String
  type: String
  updatedAt: DateTime
}

input CoachUncheckedCreateWithoutTeamInput {
  createdAt: DateTime
  handle: String!
  id: String!
  imageId: String
  isAssistant: String
  name: String!
  type: String
  updatedAt: DateTime
}

input CoachUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  teamId: NullableStringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  teamId: NullableStringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUncheckedUpdateManyWithoutCoachesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUncheckedUpdateManyWithoutTeamInput {
  connect: [CoachWhereUniqueInput]
  connectOrCreate: [CoachCreateOrConnectWithoutTeamInput]
  create: [CoachCreateWithoutTeamInput]
  createMany: CoachCreateManyTeamInputEnvelope
  delete: [CoachWhereUniqueInput]
  deleteMany: [CoachScalarWhereInput]
  disconnect: [CoachWhereUniqueInput]
  set: [CoachWhereUniqueInput]
  update: [CoachUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [CoachUpdateManyWithWhereWithoutTeamInput]
  upsert: [CoachUpsertWithWhereUniqueWithoutTeamInput]
}

input CoachUncheckedUpdateOneWithoutImageInput {
  connect: CoachWhereUniqueInput
  connectOrCreate: CoachCreateOrConnectWithoutImageInput
  create: CoachUncheckedCreateWithoutImageInput
  delete: Boolean
  disconnect: Boolean
  update: CoachUncheckedUpdateWithoutImageInput
  upsert: CoachUpsertWithoutImageInput
}

input CoachUncheckedUpdateWithoutImageInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  teamId: NullableStringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUncheckedUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: ImageUpdateOneWithoutCoachInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutCoachesInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUpdateManyWithWhereWithoutTeamInput {
  data: CoachUncheckedUpdateManyWithoutCoachesInput!
  where: CoachScalarWhereInput!
}

input CoachUpdateManyWithoutTeamInput {
  connect: [CoachWhereUniqueInput]
  connectOrCreate: [CoachCreateOrConnectWithoutTeamInput]
  create: [CoachCreateWithoutTeamInput]
  createMany: CoachCreateManyTeamInputEnvelope
  delete: [CoachWhereUniqueInput]
  deleteMany: [CoachScalarWhereInput]
  disconnect: [CoachWhereUniqueInput]
  set: [CoachWhereUniqueInput]
  update: [CoachUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [CoachUpdateManyWithWhereWithoutTeamInput]
  upsert: [CoachUpsertWithWhereUniqueWithoutTeamInput]
}

input CoachUpdateOneWithoutImageInput {
  connect: CoachWhereUniqueInput
  connectOrCreate: CoachCreateOrConnectWithoutImageInput
  create: CoachUncheckedCreateWithoutImageInput
  delete: Boolean
  disconnect: Boolean
  update: CoachUncheckedUpdateWithoutImageInput
  upsert: CoachUpsertWithoutImageInput
}

input CoachUpdateWithWhereUniqueWithoutTeamInput {
  data: CoachUncheckedUpdateWithoutTeamInput!
  where: CoachWhereUniqueInput!
}

input CoachUpdateWithoutImageInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutCoachesInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: ImageUpdateOneWithoutCoachInput
  isAssistant: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CoachUpsertWithWhereUniqueWithoutTeamInput {
  create: CoachUncheckedCreateWithoutTeamInput!
  update: CoachUncheckedUpdateWithoutTeamInput!
  where: CoachWhereUniqueInput!
}

input CoachUpsertWithoutImageInput {
  create: CoachUncheckedCreateWithoutImageInput!
  update: CoachUncheckedUpdateWithoutImageInput!
}

input CoachWhereInput {
  AND: [CoachWhereInput]
  NOT: [CoachWhereInput]
  OR: [CoachWhereInput]
  createdAt: DateTimeFilter
  handle: StringFilter
  id: StringFilter
  image: ImageWhereInput
  imageId: StringNullableFilter
  isAssistant: StringNullableFilter
  name: StringFilter
  team: TeamWhereInput
  teamId: StringNullableFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
}

input CoachWhereUniqueInput {
  handle: String
  id: String
  name: String
}

"""
Color scheme model
"""
type ColorScheme {
  createdAt: DateTime!
  id: String!
  primary: String!
  secondary: String!
  team: Team
  updatedAt: DateTime!
}

type ColorSchemeCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  primary: Int!
  secondary: Int!
  updatedAt: Int!
}

input ColorSchemeCreateInput {
  createdAt: DateTime
  id: String!
  primary: String!
  secondary: String!
  team: TeamCreateNestedOneWithoutColorSchemeInput
  updatedAt: DateTime
}

input ColorSchemeCreateManyInput {
  createdAt: DateTime
  id: String!
  primary: String!
  secondary: String!
  updatedAt: DateTime
}

input ColorSchemeCreateNestedOneWithoutTeamInput {
  connect: ColorSchemeWhereUniqueInput
  connectOrCreate: ColorSchemeCreateOrConnectWithoutTeamInput
  create: ColorSchemeUncheckedCreateWithoutTeamInput
}

input ColorSchemeCreateOrConnectWithoutTeamInput {
  create: ColorSchemeUncheckedCreateWithoutTeamInput!
  where: ColorSchemeWhereUniqueInput!
}

input ColorSchemeCreateWithoutTeamInput {
  createdAt: DateTime
  id: String!
  primary: String!
  secondary: String!
  updatedAt: DateTime
}

type ColorSchemeMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  primary: String
  secondary: String
  updatedAt: DateTime
}

type ColorSchemeMinAggregateOutputType {
  createdAt: DateTime
  id: String
  primary: String
  secondary: String
  updatedAt: DateTime
}

input ColorSchemeOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  primary: SortOrder
  secondary: SortOrder
  updatedAt: SortOrder
}

input ColorSchemeRelationFilter {
  is: ColorSchemeWhereInput
  isNot: ColorSchemeWhereInput
}

enum ColorSchemeScalarFieldEnum {
  createdAt
  id
  primary
  secondary
  updatedAt
}

input ColorSchemeScalarWhereWithAggregatesInput {
  AND: [ColorSchemeScalarWhereWithAggregatesInput]
  NOT: [ColorSchemeScalarWhereWithAggregatesInput]
  OR: [ColorSchemeScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  primary: StringWithAggregatesFilter
  secondary: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ColorSchemeUncheckedCreateInput {
  createdAt: DateTime
  id: String!
  primary: String!
  secondary: String!
  team: TeamUncheckedCreateNestedOneWithoutColorSchemeInput
  updatedAt: DateTime
}

input ColorSchemeUncheckedCreateWithoutTeamInput {
  createdAt: DateTime
  id: String!
  primary: String!
  secondary: String!
  updatedAt: DateTime
}

input ColorSchemeUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  primary: StringFieldUpdateOperationsInput
  secondary: StringFieldUpdateOperationsInput
  team: TeamUncheckedUpdateOneWithoutColorSchemeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ColorSchemeUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  primary: StringFieldUpdateOperationsInput
  secondary: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ColorSchemeUncheckedUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  primary: StringFieldUpdateOperationsInput
  secondary: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ColorSchemeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  primary: StringFieldUpdateOperationsInput
  secondary: StringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutColorSchemeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ColorSchemeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  primary: StringFieldUpdateOperationsInput
  secondary: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ColorSchemeUpdateOneWithoutTeamInput {
  connect: ColorSchemeWhereUniqueInput
  connectOrCreate: ColorSchemeCreateOrConnectWithoutTeamInput
  create: ColorSchemeUncheckedCreateWithoutTeamInput
  delete: Boolean
  disconnect: Boolean
  update: ColorSchemeUncheckedUpdateWithoutTeamInput
  upsert: ColorSchemeUpsertWithoutTeamInput
}

input ColorSchemeUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  primary: StringFieldUpdateOperationsInput
  secondary: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ColorSchemeUpsertWithoutTeamInput {
  create: ColorSchemeUncheckedCreateWithoutTeamInput!
  update: ColorSchemeUncheckedUpdateWithoutTeamInput!
}

input ColorSchemeWhereInput {
  AND: [ColorSchemeWhereInput]
  NOT: [ColorSchemeWhereInput]
  OR: [ColorSchemeWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  primary: StringFilter
  secondary: StringFilter
  team: TeamWhereInput
  updatedAt: DateTimeFilter
}

input ColorSchemeWhereUniqueInput {
  id: String
}

"""
Date custom scalar type
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  count: NestedIntNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeNullableFilter
  min: NestedDateTimeNullableFilter
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""
Decimal custom scalar type
"""
scalar Decimal

input EnumImageTypeFieldUpdateOperationsInput {
  set: ImageType
}

input EnumImageTypeFilter {
  equals: ImageType
  in: [ImageType]
  not: NestedEnumImageTypeFilter
  notIn: [ImageType]
}

input EnumImageTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumImageTypeFilter
  _min: NestedEnumImageTypeFilter
  count: NestedIntFilter
  equals: ImageType
  in: [ImageType]
  max: NestedEnumImageTypeFilter
  min: NestedEnumImageTypeFilter
  not: NestedEnumImageTypeWithAggregatesFilter
  notIn: [ImageType]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input FloatNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedFloatNullableFilter
  _min: NestedFloatNullableFilter
  _sum: NestedFloatNullableFilter
  avg: NestedFloatNullableFilter
  count: NestedIntNullableFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  max: NestedFloatNullableFilter
  min: NestedFloatNullableFilter
  not: NestedFloatNullableWithAggregatesFilter
  notIn: [Float]
  sum: NestedFloatNullableFilter
}

"""
Image for NBA team, player, or coach
"""
type Image {
  coach: Coach
  createdAt: DateTime!
  id: String!
  player: Player
  team: Team
  type: ImageType!
  updatedAt: DateTime!
  url: String!
}

type ImageCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  type: Int!
  updatedAt: Int!
  url: Int!
}

input ImageCreateInput {
  coach: CoachCreateNestedOneWithoutImageInput
  createdAt: DateTime
  id: String!
  player: PlayerCreateNestedOneWithoutImageInput
  team: TeamCreateNestedOneWithoutLogoInput
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyInput {
  createdAt: DateTime
  id: String!
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

input ImageCreateNestedOneWithoutCoachInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutCoachInput
  create: ImageUncheckedCreateWithoutCoachInput
}

input ImageCreateNestedOneWithoutPlayerInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutPlayerInput
  create: ImageUncheckedCreateWithoutPlayerInput
}

input ImageCreateNestedOneWithoutTeamInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutTeamInput
  create: ImageUncheckedCreateWithoutTeamInput
}

input ImageCreateOrConnectWithoutCoachInput {
  create: ImageUncheckedCreateWithoutCoachInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutPlayerInput {
  create: ImageUncheckedCreateWithoutPlayerInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutTeamInput {
  create: ImageUncheckedCreateWithoutTeamInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutCoachInput {
  createdAt: DateTime
  id: String!
  player: PlayerCreateNestedOneWithoutImageInput
  team: TeamCreateNestedOneWithoutLogoInput
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

input ImageCreateWithoutPlayerInput {
  coach: CoachCreateNestedOneWithoutImageInput
  createdAt: DateTime
  id: String!
  team: TeamCreateNestedOneWithoutLogoInput
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

input ImageCreateWithoutTeamInput {
  coach: CoachCreateNestedOneWithoutImageInput
  createdAt: DateTime
  id: String!
  player: PlayerCreateNestedOneWithoutImageInput
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

type ImageMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  type: ImageType
  updatedAt: DateTime
  url: String
}

type ImageMinAggregateOutputType {
  createdAt: DateTime
  id: String
  type: ImageType
  updatedAt: DateTime
  url: String
}

input ImageOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input ImageRelationFilter {
  is: ImageWhereInput
  isNot: ImageWhereInput
}

enum ImageScalarFieldEnum {
  createdAt
  id
  type
  updatedAt
  url
}

input ImageScalarWhereWithAggregatesInput {
  AND: [ImageScalarWhereWithAggregatesInput]
  NOT: [ImageScalarWhereWithAggregatesInput]
  OR: [ImageScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  type: EnumImageTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  url: StringWithAggregatesFilter
}

enum ImageType {
  HEADSHOT
  LOGO
}

input ImageUncheckedCreateInput {
  coach: CoachUncheckedCreateNestedOneWithoutImageInput
  createdAt: DateTime
  id: String!
  player: PlayerUncheckedCreateNestedOneWithoutImageInput
  team: TeamUncheckedCreateNestedOneWithoutLogoInput
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

input ImageUncheckedCreateWithoutCoachInput {
  createdAt: DateTime
  id: String!
  player: PlayerUncheckedCreateNestedOneWithoutImageInput
  team: TeamUncheckedCreateNestedOneWithoutLogoInput
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

input ImageUncheckedCreateWithoutPlayerInput {
  coach: CoachUncheckedCreateNestedOneWithoutImageInput
  createdAt: DateTime
  id: String!
  team: TeamUncheckedCreateNestedOneWithoutLogoInput
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

input ImageUncheckedCreateWithoutTeamInput {
  coach: CoachUncheckedCreateNestedOneWithoutImageInput
  createdAt: DateTime
  id: String!
  player: PlayerUncheckedCreateNestedOneWithoutImageInput
  type: ImageType!
  updatedAt: DateTime
  url: String!
}

input ImageUncheckedUpdateInput {
  coach: CoachUncheckedUpdateOneWithoutImageInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  player: PlayerUncheckedUpdateOneWithoutImageInput
  team: TeamUncheckedUpdateOneWithoutLogoInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateWithoutCoachInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  player: PlayerUncheckedUpdateOneWithoutImageInput
  team: TeamUncheckedUpdateOneWithoutLogoInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateWithoutPlayerInput {
  coach: CoachUncheckedUpdateOneWithoutImageInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  team: TeamUncheckedUpdateOneWithoutLogoInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateWithoutTeamInput {
  coach: CoachUncheckedUpdateOneWithoutImageInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  player: PlayerUncheckedUpdateOneWithoutImageInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateInput {
  coach: CoachUpdateOneWithoutImageInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  player: PlayerUpdateOneWithoutImageInput
  team: TeamUpdateOneWithoutLogoInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateOneWithoutCoachInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutCoachInput
  create: ImageUncheckedCreateWithoutCoachInput
  delete: Boolean
  disconnect: Boolean
  update: ImageUncheckedUpdateWithoutCoachInput
  upsert: ImageUpsertWithoutCoachInput
}

input ImageUpdateOneWithoutPlayerInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutPlayerInput
  create: ImageUncheckedCreateWithoutPlayerInput
  delete: Boolean
  disconnect: Boolean
  update: ImageUncheckedUpdateWithoutPlayerInput
  upsert: ImageUpsertWithoutPlayerInput
}

input ImageUpdateOneWithoutTeamInput {
  connect: ImageWhereUniqueInput
  connectOrCreate: ImageCreateOrConnectWithoutTeamInput
  create: ImageUncheckedCreateWithoutTeamInput
  delete: Boolean
  disconnect: Boolean
  update: ImageUncheckedUpdateWithoutTeamInput
  upsert: ImageUpsertWithoutTeamInput
}

input ImageUpdateWithoutCoachInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  player: PlayerUpdateOneWithoutImageInput
  team: TeamUpdateOneWithoutLogoInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateWithoutPlayerInput {
  coach: CoachUpdateOneWithoutImageInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutLogoInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateWithoutTeamInput {
  coach: CoachUpdateOneWithoutImageInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  player: PlayerUpdateOneWithoutImageInput
  type: EnumImageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpsertWithoutCoachInput {
  create: ImageUncheckedCreateWithoutCoachInput!
  update: ImageUncheckedUpdateWithoutCoachInput!
}

input ImageUpsertWithoutPlayerInput {
  create: ImageUncheckedCreateWithoutPlayerInput!
  update: ImageUncheckedUpdateWithoutPlayerInput!
}

input ImageUpsertWithoutTeamInput {
  create: ImageUncheckedCreateWithoutTeamInput!
  update: ImageUncheckedUpdateWithoutTeamInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput]
  NOT: [ImageWhereInput]
  OR: [ImageWhereInput]
  coach: CoachWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  player: PlayerWhereInput
  team: TeamWhereInput
  type: EnumImageTypeFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input ImageWhereUniqueInput {
  id: String
  url: String
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  avg: NestedFloatNullableFilter
  count: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  max: NestedIntNullableFilter
  min: NestedIntNullableFilter
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
  sum: NestedIntNullableFilter
}

"""
Json custom scalar type
"""
scalar Json

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account!
  createOneCoach(data: CoachCreateInput!): Coach!
  createOneColorScheme(data: ColorSchemeCreateInput!): ColorScheme!
  createOneImage(data: ImageCreateInput!): Image!
  createOnePlayer(data: PlayerCreateInput!): Player!
  createOneSession(data: SessionCreateInput!): Session!
  createOneTeam(data: TeamCreateInput!): Team!
  createOneUser(data: UserCreateInput!): User!
  createOneVerificationRequest(data: VerificationRequestCreateInput!): VerificationRequest!
  deleteManyAccount(where: AccountWhereInput): BatchPayload!
  deleteManyCoach(where: CoachWhereInput): BatchPayload!
  deleteManyColorScheme(where: ColorSchemeWhereInput): BatchPayload!
  deleteManyImage(where: ImageWhereInput): BatchPayload!
  deleteManyPlayer(where: PlayerWhereInput): BatchPayload!
  deleteManySession(where: SessionWhereInput): BatchPayload!
  deleteManyTeam(where: TeamWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteManyVerificationRequest(where: VerificationRequestWhereInput): BatchPayload!
  deleteOneAccount(where: AccountWhereUniqueInput!): Account
  deleteOneCoach(where: CoachWhereUniqueInput!): Coach
  deleteOneColorScheme(where: ColorSchemeWhereUniqueInput!): ColorScheme
  deleteOneImage(where: ImageWhereUniqueInput!): Image
  deleteOnePlayer(where: PlayerWhereUniqueInput!): Player
  deleteOneSession(where: SessionWhereUniqueInput!): Session
  deleteOneTeam(where: TeamWhereUniqueInput!): Team
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneVerificationRequest(where: VerificationRequestWhereUniqueInput!): VerificationRequest
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  updateManyCoach(data: CoachUpdateManyMutationInput!, where: CoachWhereInput): BatchPayload!
  updateManyColorScheme(
    data: ColorSchemeUpdateManyMutationInput!
    where: ColorSchemeWhereInput
  ): BatchPayload!
  updateManyImage(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  updateManyPlayer(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  updateManyTeam(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyVerificationRequest(
    data: VerificationRequestUpdateManyMutationInput!
    where: VerificationRequestWhereInput
  ): BatchPayload!
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  updateOneCoach(data: CoachUpdateInput!, where: CoachWhereUniqueInput!): Coach!
  updateOneColorScheme(
    data: ColorSchemeUpdateInput!
    where: ColorSchemeWhereUniqueInput!
  ): ColorScheme!
  updateOneImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image!
  updateOnePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player!
  updateOneSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  updateOneTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateOneVerificationRequest(
    data: VerificationRequestUpdateInput!
    where: VerificationRequestWhereUniqueInput!
  ): VerificationRequest!
  upsertOneAccount(
    create: AccountCreateInput!
    update: AccountUpdateInput!
    where: AccountWhereUniqueInput!
  ): Account!
  upsertOneCoach(
    create: CoachCreateInput!
    update: CoachUpdateInput!
    where: CoachWhereUniqueInput!
  ): Coach!
  upsertOneColorScheme(
    create: ColorSchemeCreateInput!
    update: ColorSchemeUpdateInput!
    where: ColorSchemeWhereUniqueInput!
  ): ColorScheme!
  upsertOneImage(
    create: ImageCreateInput!
    update: ImageUpdateInput!
    where: ImageWhereUniqueInput!
  ): Image!
  upsertOnePlayer(
    create: PlayerCreateInput!
    update: PlayerUpdateInput!
    where: PlayerWhereUniqueInput!
  ): Player!
  upsertOneSession(
    create: SessionCreateInput!
    update: SessionUpdateInput!
    where: SessionWhereUniqueInput!
  ): Session!
  upsertOneTeam(
    create: TeamCreateInput!
    update: TeamUpdateInput!
    where: TeamWhereUniqueInput!
  ): Team!
  upsertOneUser(
    create: UserCreateInput!
    update: UserUpdateInput!
    where: UserWhereUniqueInput!
  ): User!
  upsertOneVerificationRequest(
    create: VerificationRequestCreateInput!
    update: VerificationRequestUpdateInput!
    where: VerificationRequestWhereUniqueInput!
  ): VerificationRequest!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  count: NestedIntNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeNullableFilter
  min: NestedDateTimeNullableFilter
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedEnumImageTypeFilter {
  equals: ImageType
  in: [ImageType]
  not: NestedEnumImageTypeFilter
  notIn: [ImageType]
}

input NestedEnumImageTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumImageTypeFilter
  _min: NestedEnumImageTypeFilter
  count: NestedIntFilter
  equals: ImageType
  in: [ImageType]
  max: NestedEnumImageTypeFilter
  min: NestedEnumImageTypeFilter
  not: NestedEnumImageTypeWithAggregatesFilter
  notIn: [ImageType]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input NestedFloatNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedFloatNullableFilter
  _min: NestedFloatNullableFilter
  _sum: NestedFloatNullableFilter
  avg: NestedFloatNullableFilter
  count: NestedIntNullableFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  max: NestedFloatNullableFilter
  min: NestedFloatNullableFilter
  not: NestedFloatNullableWithAggregatesFilter
  notIn: [Float]
  sum: NestedFloatNullableFilter
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  avg: NestedFloatNullableFilter
  count: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  max: NestedIntNullableFilter
  min: NestedIntNullableFilter
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
  sum: NestedIntNullableFilter
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  count: NestedIntNullableFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringNullableFilter
  min: NestedStringNullableFilter
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

"""
Player model
"""
type Player {
  createdAt: DateTime!
  handle: String!
  height: String!
  id: String!
  image: Image
  imageId: String
  name: String!
  number: String
  position: String
  slug: String!
  team: Team
  teamId: String
  updatedAt: DateTime!
  weight: String!
}

type PlayerCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  handle: Int!
  height: Int!
  id: Int!
  imageId: Int!
  name: Int!
  number: Int!
  position: Int!
  slug: Int!
  teamId: Int!
  updatedAt: Int!
  weight: Int!
}

input PlayerCreateInput {
  createdAt: DateTime
  handle: String!
  height: String!
  id: String!
  image: ImageCreateNestedOneWithoutPlayerInput
  name: String!
  number: String
  position: String
  slug: String!
  team: TeamCreateNestedOneWithoutPlayersInput
  updatedAt: DateTime
  weight: String!
}

input PlayerCreateManyInput {
  createdAt: DateTime
  handle: String!
  height: String!
  id: String!
  imageId: String
  name: String!
  number: String
  position: String
  slug: String!
  teamId: String
  updatedAt: DateTime
  weight: String!
}

input PlayerCreateManyTeamInput {
  createdAt: DateTime
  handle: String!
  height: String!
  id: String!
  imageId: String
  name: String!
  number: String
  position: String
  slug: String!
  updatedAt: DateTime
  weight: String!
}

input PlayerCreateManyTeamInputEnvelope {
  data: PlayerCreateManyTeamInput!
  skipDuplicates: Boolean
}

input PlayerCreateNestedManyWithoutTeamInput {
  connect: [PlayerWhereUniqueInput]
  connectOrCreate: [PlayerCreateOrConnectWithoutTeamInput]
  create: [PlayerCreateWithoutTeamInput]
  createMany: PlayerCreateManyTeamInputEnvelope
}

input PlayerCreateNestedOneWithoutImageInput {
  connect: PlayerWhereUniqueInput
  connectOrCreate: PlayerCreateOrConnectWithoutImageInput
  create: PlayerUncheckedCreateWithoutImageInput
}

input PlayerCreateOrConnectWithoutImageInput {
  create: PlayerUncheckedCreateWithoutImageInput!
  where: PlayerWhereUniqueInput!
}

input PlayerCreateOrConnectWithoutTeamInput {
  create: PlayerUncheckedCreateWithoutTeamInput!
  where: PlayerWhereUniqueInput!
}

input PlayerCreateWithoutImageInput {
  createdAt: DateTime
  handle: String!
  height: String!
  id: String!
  name: String!
  number: String
  position: String
  slug: String!
  team: TeamCreateNestedOneWithoutPlayersInput
  updatedAt: DateTime
  weight: String!
}

input PlayerCreateWithoutTeamInput {
  createdAt: DateTime
  handle: String!
  height: String!
  id: String!
  image: ImageCreateNestedOneWithoutPlayerInput
  name: String!
  number: String
  position: String
  slug: String!
  updatedAt: DateTime
  weight: String!
}

input PlayerListRelationFilter {
  every: PlayerWhereInput
  none: PlayerWhereInput
  some: PlayerWhereInput
}

type PlayerMaxAggregateOutputType {
  createdAt: DateTime
  handle: String
  height: String
  id: String
  imageId: String
  name: String
  number: String
  position: String
  slug: String
  teamId: String
  updatedAt: DateTime
  weight: String
}

type PlayerMinAggregateOutputType {
  createdAt: DateTime
  handle: String
  height: String
  id: String
  imageId: String
  name: String
  number: String
  position: String
  slug: String
  teamId: String
  updatedAt: DateTime
  weight: String
}

input PlayerOrderByInput {
  createdAt: SortOrder
  handle: SortOrder
  height: SortOrder
  id: SortOrder
  imageId: SortOrder
  name: SortOrder
  number: SortOrder
  position: SortOrder
  slug: SortOrder
  teamId: SortOrder
  updatedAt: SortOrder
  weight: SortOrder
}

input PlayerRelationFilter {
  is: PlayerWhereInput
  isNot: PlayerWhereInput
}

enum PlayerScalarFieldEnum {
  createdAt
  handle
  height
  id
  imageId
  name
  number
  position
  slug
  teamId
  updatedAt
  weight
}

input PlayerScalarWhereInput {
  AND: [PlayerScalarWhereInput]
  NOT: [PlayerScalarWhereInput]
  OR: [PlayerScalarWhereInput]
  createdAt: DateTimeFilter
  handle: StringFilter
  height: StringFilter
  id: StringFilter
  imageId: StringNullableFilter
  name: StringFilter
  number: StringNullableFilter
  position: StringNullableFilter
  slug: StringFilter
  teamId: StringNullableFilter
  updatedAt: DateTimeFilter
  weight: StringFilter
}

input PlayerScalarWhereWithAggregatesInput {
  AND: [PlayerScalarWhereWithAggregatesInput]
  NOT: [PlayerScalarWhereWithAggregatesInput]
  OR: [PlayerScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  handle: StringWithAggregatesFilter
  height: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  imageId: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  number: StringNullableWithAggregatesFilter
  position: StringNullableWithAggregatesFilter
  slug: StringWithAggregatesFilter
  teamId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  weight: StringWithAggregatesFilter
}

input PlayerUncheckedCreateInput {
  createdAt: DateTime
  handle: String!
  height: String!
  id: String!
  imageId: String
  name: String!
  number: String
  position: String
  slug: String!
  teamId: String
  updatedAt: DateTime
  weight: String!
}

input PlayerUncheckedCreateNestedManyWithoutTeamInput {
  connect: [PlayerWhereUniqueInput]
  connectOrCreate: [PlayerCreateOrConnectWithoutTeamInput]
  create: [PlayerCreateWithoutTeamInput]
  createMany: PlayerCreateManyTeamInputEnvelope
}

input PlayerUncheckedCreateNestedOneWithoutImageInput {
  connect: PlayerWhereUniqueInput
  connectOrCreate: PlayerCreateOrConnectWithoutImageInput
  create: PlayerUncheckedCreateWithoutImageInput
}

input PlayerUncheckedCreateWithoutImageInput {
  createdAt: DateTime
  handle: String!
  height: String!
  id: String!
  name: String!
  number: String
  position: String
  slug: String!
  teamId: String
  updatedAt: DateTime
  weight: String!
}

input PlayerUncheckedCreateWithoutTeamInput {
  createdAt: DateTime
  handle: String!
  height: String!
  id: String!
  imageId: String
  name: String!
  number: String
  position: String
  slug: String!
  updatedAt: DateTime
  weight: String!
}

input PlayerUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  teamId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  teamId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUncheckedUpdateManyWithoutPlayersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUncheckedUpdateManyWithoutTeamInput {
  connect: [PlayerWhereUniqueInput]
  connectOrCreate: [PlayerCreateOrConnectWithoutTeamInput]
  create: [PlayerCreateWithoutTeamInput]
  createMany: PlayerCreateManyTeamInputEnvelope
  delete: [PlayerWhereUniqueInput]
  deleteMany: [PlayerScalarWhereInput]
  disconnect: [PlayerWhereUniqueInput]
  set: [PlayerWhereUniqueInput]
  update: [PlayerUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [PlayerUpdateManyWithWhereWithoutTeamInput]
  upsert: [PlayerUpsertWithWhereUniqueWithoutTeamInput]
}

input PlayerUncheckedUpdateOneWithoutImageInput {
  connect: PlayerWhereUniqueInput
  connectOrCreate: PlayerCreateOrConnectWithoutImageInput
  create: PlayerUncheckedCreateWithoutImageInput
  delete: Boolean
  disconnect: Boolean
  update: PlayerUncheckedUpdateWithoutImageInput
  upsert: PlayerUpsertWithoutImageInput
}

input PlayerUncheckedUpdateWithoutImageInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  teamId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUncheckedUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: ImageUpdateOneWithoutPlayerInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutPlayersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUpdateManyWithWhereWithoutTeamInput {
  data: PlayerUncheckedUpdateManyWithoutPlayersInput!
  where: PlayerScalarWhereInput!
}

input PlayerUpdateManyWithoutTeamInput {
  connect: [PlayerWhereUniqueInput]
  connectOrCreate: [PlayerCreateOrConnectWithoutTeamInput]
  create: [PlayerCreateWithoutTeamInput]
  createMany: PlayerCreateManyTeamInputEnvelope
  delete: [PlayerWhereUniqueInput]
  deleteMany: [PlayerScalarWhereInput]
  disconnect: [PlayerWhereUniqueInput]
  set: [PlayerWhereUniqueInput]
  update: [PlayerUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [PlayerUpdateManyWithWhereWithoutTeamInput]
  upsert: [PlayerUpsertWithWhereUniqueWithoutTeamInput]
}

input PlayerUpdateOneWithoutImageInput {
  connect: PlayerWhereUniqueInput
  connectOrCreate: PlayerCreateOrConnectWithoutImageInput
  create: PlayerUncheckedCreateWithoutImageInput
  delete: Boolean
  disconnect: Boolean
  update: PlayerUncheckedUpdateWithoutImageInput
  upsert: PlayerUpsertWithoutImageInput
}

input PlayerUpdateWithWhereUniqueWithoutTeamInput {
  data: PlayerUncheckedUpdateWithoutTeamInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpdateWithoutImageInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  team: TeamUpdateOneWithoutPlayersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  height: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: ImageUpdateOneWithoutPlayerInput
  name: StringFieldUpdateOperationsInput
  number: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: StringFieldUpdateOperationsInput
}

input PlayerUpsertWithWhereUniqueWithoutTeamInput {
  create: PlayerUncheckedCreateWithoutTeamInput!
  update: PlayerUncheckedUpdateWithoutTeamInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpsertWithoutImageInput {
  create: PlayerUncheckedCreateWithoutImageInput!
  update: PlayerUncheckedUpdateWithoutImageInput!
}

input PlayerWhereInput {
  AND: [PlayerWhereInput]
  NOT: [PlayerWhereInput]
  OR: [PlayerWhereInput]
  createdAt: DateTimeFilter
  handle: StringFilter
  height: StringFilter
  id: StringFilter
  image: ImageWhereInput
  imageId: StringNullableFilter
  name: StringFilter
  number: StringNullableFilter
  position: StringNullableFilter
  slug: StringFilter
  team: TeamWhereInput
  teamId: StringNullableFilter
  updatedAt: DateTimeFilter
  weight: StringFilter
}

input PlayerWhereUniqueInput {
  handle: String
  id: String
  name: String
  slug: String
}

type Query {
  aggregateAccount(
    cursor: AccountWhereUniqueInput
    distinct: AccountScalarFieldEnum
    orderBy: [AccountOrderByInput]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): AggregateAccount
  aggregateCoach(
    cursor: CoachWhereUniqueInput
    distinct: CoachScalarFieldEnum
    orderBy: [CoachOrderByInput]
    skip: Int
    take: Int
    where: CoachWhereInput
  ): AggregateCoach
  aggregateColorScheme(
    cursor: ColorSchemeWhereUniqueInput
    distinct: ColorSchemeScalarFieldEnum
    orderBy: [ColorSchemeOrderByInput]
    skip: Int
    take: Int
    where: ColorSchemeWhereInput
  ): AggregateColorScheme
  aggregateImage(
    cursor: ImageWhereUniqueInput
    distinct: ImageScalarFieldEnum
    orderBy: [ImageOrderByInput]
    skip: Int
    take: Int
    where: ImageWhereInput
  ): AggregateImage
  aggregatePlayer(
    cursor: PlayerWhereUniqueInput
    distinct: PlayerScalarFieldEnum
    orderBy: [PlayerOrderByInput]
    skip: Int
    take: Int
    where: PlayerWhereInput
  ): AggregatePlayer
  aggregateSession(
    cursor: SessionWhereUniqueInput
    distinct: SessionScalarFieldEnum
    orderBy: [SessionOrderByInput]
    skip: Int
    take: Int
    where: SessionWhereInput
  ): AggregateSession
  aggregateTeam(
    cursor: TeamWhereUniqueInput
    distinct: TeamScalarFieldEnum
    orderBy: [TeamOrderByInput]
    skip: Int
    take: Int
    where: TeamWhereInput
  ): AggregateTeam
  aggregateUser(
    cursor: UserWhereUniqueInput
    distinct: UserScalarFieldEnum
    orderBy: [UserOrderByInput]
    skip: Int
    take: Int
    where: UserWhereInput
  ): AggregateUser
  aggregateVerificationRequest(
    cursor: VerificationRequestWhereUniqueInput
    distinct: VerificationRequestScalarFieldEnum
    orderBy: [VerificationRequestOrderByInput]
    skip: Int
    take: Int
    where: VerificationRequestWhereInput
  ): AggregateVerificationRequest
  findFirstAccount(
    cursor: AccountWhereUniqueInput
    distinct: AccountScalarFieldEnum
    orderBy: [AccountOrderByInput]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): Account
  findFirstCoach(
    cursor: CoachWhereUniqueInput
    distinct: CoachScalarFieldEnum
    orderBy: [CoachOrderByInput]
    skip: Int
    take: Int
    where: CoachWhereInput
  ): Coach
  findFirstColorScheme(
    cursor: ColorSchemeWhereUniqueInput
    distinct: ColorSchemeScalarFieldEnum
    orderBy: [ColorSchemeOrderByInput]
    skip: Int
    take: Int
    where: ColorSchemeWhereInput
  ): ColorScheme
  findFirstImage(
    cursor: ImageWhereUniqueInput
    distinct: ImageScalarFieldEnum
    orderBy: [ImageOrderByInput]
    skip: Int
    take: Int
    where: ImageWhereInput
  ): Image
  findFirstPlayer(
    cursor: PlayerWhereUniqueInput
    distinct: PlayerScalarFieldEnum
    orderBy: [PlayerOrderByInput]
    skip: Int
    take: Int
    where: PlayerWhereInput
  ): Player
  findFirstSession(
    cursor: SessionWhereUniqueInput
    distinct: SessionScalarFieldEnum
    orderBy: [SessionOrderByInput]
    skip: Int
    take: Int
    where: SessionWhereInput
  ): Session
  findFirstTeam(
    cursor: TeamWhereUniqueInput
    distinct: TeamScalarFieldEnum
    orderBy: [TeamOrderByInput]
    skip: Int
    take: Int
    where: TeamWhereInput
  ): Team
  findFirstUser(
    cursor: UserWhereUniqueInput
    distinct: UserScalarFieldEnum
    orderBy: [UserOrderByInput]
    skip: Int
    take: Int
    where: UserWhereInput
  ): User
  findFirstVerificationRequest(
    cursor: VerificationRequestWhereUniqueInput
    distinct: VerificationRequestScalarFieldEnum
    orderBy: [VerificationRequestOrderByInput]
    skip: Int
    take: Int
    where: VerificationRequestWhereInput
  ): VerificationRequest
  findManyAccount(
    cursor: AccountWhereUniqueInput
    distinct: AccountScalarFieldEnum
    orderBy: [AccountOrderByInput]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): [Account!]!
  findManyAccountCount(
    cursor: AccountWhereUniqueInput
    distinct: AccountScalarFieldEnum
    orderBy: [AccountOrderByInput]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): Int!
  findManyCoach(
    cursor: CoachWhereUniqueInput
    distinct: CoachScalarFieldEnum
    orderBy: [CoachOrderByInput]
    skip: Int
    take: Int
    where: CoachWhereInput
  ): [Coach!]!
  findManyCoachCount(
    cursor: CoachWhereUniqueInput
    distinct: CoachScalarFieldEnum
    orderBy: [CoachOrderByInput]
    skip: Int
    take: Int
    where: CoachWhereInput
  ): Int!
  findManyColorScheme(
    cursor: ColorSchemeWhereUniqueInput
    distinct: ColorSchemeScalarFieldEnum
    orderBy: [ColorSchemeOrderByInput]
    skip: Int
    take: Int
    where: ColorSchemeWhereInput
  ): [ColorScheme!]!
  findManyColorSchemeCount(
    cursor: ColorSchemeWhereUniqueInput
    distinct: ColorSchemeScalarFieldEnum
    orderBy: [ColorSchemeOrderByInput]
    skip: Int
    take: Int
    where: ColorSchemeWhereInput
  ): Int!
  findManyImage(
    cursor: ImageWhereUniqueInput
    distinct: ImageScalarFieldEnum
    orderBy: [ImageOrderByInput]
    skip: Int
    take: Int
    where: ImageWhereInput
  ): [Image!]!
  findManyImageCount(
    cursor: ImageWhereUniqueInput
    distinct: ImageScalarFieldEnum
    orderBy: [ImageOrderByInput]
    skip: Int
    take: Int
    where: ImageWhereInput
  ): Int!
  findManyPlayer(
    cursor: PlayerWhereUniqueInput
    distinct: PlayerScalarFieldEnum
    orderBy: [PlayerOrderByInput]
    skip: Int
    take: Int
    where: PlayerWhereInput
  ): [Player!]!
  findManyPlayerCount(
    cursor: PlayerWhereUniqueInput
    distinct: PlayerScalarFieldEnum
    orderBy: [PlayerOrderByInput]
    skip: Int
    take: Int
    where: PlayerWhereInput
  ): Int!
  findManySession(
    cursor: SessionWhereUniqueInput
    distinct: SessionScalarFieldEnum
    orderBy: [SessionOrderByInput]
    skip: Int
    take: Int
    where: SessionWhereInput
  ): [Session!]!
  findManySessionCount(
    cursor: SessionWhereUniqueInput
    distinct: SessionScalarFieldEnum
    orderBy: [SessionOrderByInput]
    skip: Int
    take: Int
    where: SessionWhereInput
  ): Int!
  findManyTeam(
    cursor: TeamWhereUniqueInput
    distinct: TeamScalarFieldEnum
    orderBy: [TeamOrderByInput]
    skip: Int
    take: Int
    where: TeamWhereInput
  ): [Team!]!
  findManyTeamCount(
    cursor: TeamWhereUniqueInput
    distinct: TeamScalarFieldEnum
    orderBy: [TeamOrderByInput]
    skip: Int
    take: Int
    where: TeamWhereInput
  ): Int!
  findManyUser(
    cursor: UserWhereUniqueInput
    distinct: UserScalarFieldEnum
    orderBy: [UserOrderByInput]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!
  findManyUserCount(
    cursor: UserWhereUniqueInput
    distinct: UserScalarFieldEnum
    orderBy: [UserOrderByInput]
    skip: Int
    take: Int
    where: UserWhereInput
  ): Int!
  findManyVerificationRequest(
    cursor: VerificationRequestWhereUniqueInput
    distinct: VerificationRequestScalarFieldEnum
    orderBy: [VerificationRequestOrderByInput]
    skip: Int
    take: Int
    where: VerificationRequestWhereInput
  ): [VerificationRequest!]!
  findManyVerificationRequestCount(
    cursor: VerificationRequestWhereUniqueInput
    distinct: VerificationRequestScalarFieldEnum
    orderBy: [VerificationRequestOrderByInput]
    skip: Int
    take: Int
    where: VerificationRequestWhereInput
  ): Int!
  findUniqueAccount(where: AccountWhereUniqueInput!): Account
  findUniqueCoach(where: CoachWhereUniqueInput!): Coach
  findUniqueColorScheme(where: ColorSchemeWhereUniqueInput!): ColorScheme
  findUniqueImage(where: ImageWhereUniqueInput!): Image
  findUniquePlayer(where: PlayerWhereUniqueInput!): Player
  findUniqueSession(where: SessionWhereUniqueInput!): Session
  findUniqueTeam(where: TeamWhereUniqueInput!): Team
  findUniqueUser(where: UserWhereUniqueInput!): User
  findUniqueVerificationRequest(where: VerificationRequestWhereUniqueInput!): VerificationRequest
}

enum QueryMode {
  default
  insensitive
}

type Session {
  accessToken: String!
  createdAt: DateTime!
  expires: DateTime!
  id: String!
  sessionToken: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type SessionCountAggregateOutputType {
  _all: Int!
  accessToken: Int!
  createdAt: Int!
  expires: Int!
  id: Int!
  sessionToken: Int!
  updatedAt: Int!
  userId: Int!
}

input SessionCreateInput {
  accessToken: String!
  createdAt: DateTime
  expires: DateTime!
  id: String
  sessionToken: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
  accessToken: String!
  createdAt: DateTime
  expires: DateTime!
  id: String
  sessionToken: String!
  updatedAt: DateTime
  userId: String!
}

input SessionCreateManyUserInput {
  accessToken: String!
  createdAt: DateTime
  expires: DateTime!
  id: String
  sessionToken: String!
  updatedAt: DateTime
}

input SessionCreateManyUserInputEnvelope {
  data: SessionCreateManyUserInput!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput]
  create: [SessionCreateWithoutUserInput]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionUncheckedCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  accessToken: String!
  createdAt: DateTime
  expires: DateTime!
  id: String
  sessionToken: String!
  updatedAt: DateTime
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

type SessionMaxAggregateOutputType {
  accessToken: String
  createdAt: DateTime
  expires: DateTime
  id: String
  sessionToken: String
  updatedAt: DateTime
  userId: String
}

type SessionMinAggregateOutputType {
  accessToken: String
  createdAt: DateTime
  expires: DateTime
  id: String
  sessionToken: String
  updatedAt: DateTime
  userId: String
}

input SessionOrderByInput {
  accessToken: SortOrder
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  accessToken
  createdAt
  expires
  id
  sessionToken
  updatedAt
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput]
  NOT: [SessionScalarWhereInput]
  OR: [SessionScalarWhereInput]
  accessToken: StringFilter
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput]
  NOT: [SessionScalarWhereWithAggregatesInput]
  OR: [SessionScalarWhereWithAggregatesInput]
  accessToken: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  sessionToken: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SessionUncheckedCreateInput {
  accessToken: String!
  createdAt: DateTime
  expires: DateTime!
  id: String
  sessionToken: String!
  updatedAt: DateTime
  userId: String!
}

input SessionUncheckedCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput]
  create: [SessionCreateWithoutUserInput]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionUncheckedCreateWithoutUserInput {
  accessToken: String!
  createdAt: DateTime
  expires: DateTime!
  id: String
  sessionToken: String!
  updatedAt: DateTime
}

input SessionUncheckedUpdateInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input SessionUncheckedUpdateManyInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input SessionUncheckedUpdateManyWithoutSessionsInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SessionUncheckedUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput]
  create: [SessionCreateWithoutUserInput]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput]
  deleteMany: [SessionScalarWhereInput]
  disconnect: [SessionWhereUniqueInput]
  set: [SessionWhereUniqueInput]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput]
}

input SessionUncheckedUpdateWithoutUserInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SessionUpdateInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSessionsInput
}

input SessionUpdateManyMutationInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUncheckedUpdateManyWithoutSessionsInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput]
  create: [SessionCreateWithoutUserInput]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput]
  deleteMany: [SessionScalarWhereInput]
  disconnect: [SessionWhereUniqueInput]
  set: [SessionWhereUniqueInput]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUncheckedUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionUncheckedCreateWithoutUserInput!
  update: SessionUncheckedUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput]
  NOT: [SessionWhereInput]
  OR: [SessionWhereInput]
  accessToken: StringFilter
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input SessionWhereUniqueInput {
  accessToken: String
  id: String
  sessionToken: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  count: NestedIntNullableFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringNullableFilter
  min: NestedStringNullableFilter
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

"""
Team model
"""
type Team {
  abbreviation: String!
  city: String!
  coaches(
    cursor: CoachWhereUniqueInput
    distinct: CoachScalarFieldEnum
    orderBy: CoachOrderByInput
    skip: Int
    take: Int
    where: CoachWhereInput
  ): [Coach!]!
  colorScheme: ColorScheme
  colorSchemeId: String
  conference: String!
  createdAt: DateTime!
  division: String!
  established: String!
  handle: String!
  id: String!
  logo: Image
  logoId: String
  losses: Int
  name: String!
  players(
    cursor: PlayerWhereUniqueInput
    distinct: PlayerScalarFieldEnum
    orderBy: PlayerOrderByInput
    skip: Int
    take: Int
    where: PlayerWhereInput
  ): [Player!]!
  slug: String!
  updatedAt: DateTime!
  winPercentage: Float
  wins: Int
}

type TeamAvgAggregateOutputType {
  losses: Float
  winPercentage: Float
  wins: Float
}

type TeamCountAggregateOutputType {
  _all: Int!
  abbreviation: Int!
  city: Int!
  colorSchemeId: Int!
  conference: Int!
  createdAt: Int!
  division: Int!
  established: Int!
  handle: Int!
  id: Int!
  logoId: Int!
  losses: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
  winPercentage: Int!
  wins: Int!
}

input TeamCreateInput {
  abbreviation: String!
  city: String!
  coaches: CoachCreateNestedManyWithoutTeamInput
  colorScheme: ColorSchemeCreateNestedOneWithoutTeamInput
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logo: ImageCreateNestedOneWithoutTeamInput
  losses: Int
  name: String!
  players: PlayerCreateNestedManyWithoutTeamInput
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamCreateManyInput {
  abbreviation: String!
  city: String!
  colorSchemeId: String
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logoId: String
  losses: Int
  name: String!
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamCreateNestedOneWithoutCoachesInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutCoachesInput
  create: TeamUncheckedCreateWithoutCoachesInput
}

input TeamCreateNestedOneWithoutColorSchemeInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutColorSchemeInput
  create: TeamUncheckedCreateWithoutColorSchemeInput
}

input TeamCreateNestedOneWithoutLogoInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutLogoInput
  create: TeamUncheckedCreateWithoutLogoInput
}

input TeamCreateNestedOneWithoutPlayersInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutPlayersInput
  create: TeamUncheckedCreateWithoutPlayersInput
}

input TeamCreateOrConnectWithoutCoachesInput {
  create: TeamUncheckedCreateWithoutCoachesInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutColorSchemeInput {
  create: TeamUncheckedCreateWithoutColorSchemeInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutLogoInput {
  create: TeamUncheckedCreateWithoutLogoInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutPlayersInput {
  create: TeamUncheckedCreateWithoutPlayersInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateWithoutCoachesInput {
  abbreviation: String!
  city: String!
  colorScheme: ColorSchemeCreateNestedOneWithoutTeamInput
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logo: ImageCreateNestedOneWithoutTeamInput
  losses: Int
  name: String!
  players: PlayerCreateNestedManyWithoutTeamInput
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamCreateWithoutColorSchemeInput {
  abbreviation: String!
  city: String!
  coaches: CoachCreateNestedManyWithoutTeamInput
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logo: ImageCreateNestedOneWithoutTeamInput
  losses: Int
  name: String!
  players: PlayerCreateNestedManyWithoutTeamInput
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamCreateWithoutLogoInput {
  abbreviation: String!
  city: String!
  coaches: CoachCreateNestedManyWithoutTeamInput
  colorScheme: ColorSchemeCreateNestedOneWithoutTeamInput
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  losses: Int
  name: String!
  players: PlayerCreateNestedManyWithoutTeamInput
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamCreateWithoutPlayersInput {
  abbreviation: String!
  city: String!
  coaches: CoachCreateNestedManyWithoutTeamInput
  colorScheme: ColorSchemeCreateNestedOneWithoutTeamInput
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logo: ImageCreateNestedOneWithoutTeamInput
  losses: Int
  name: String!
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

type TeamMaxAggregateOutputType {
  abbreviation: String
  city: String
  colorSchemeId: String
  conference: String
  createdAt: DateTime
  division: String
  established: String
  handle: String
  id: String
  logoId: String
  losses: Int
  name: String
  slug: String
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

type TeamMinAggregateOutputType {
  abbreviation: String
  city: String
  colorSchemeId: String
  conference: String
  createdAt: DateTime
  division: String
  established: String
  handle: String
  id: String
  logoId: String
  losses: Int
  name: String
  slug: String
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamOrderByInput {
  abbreviation: SortOrder
  city: SortOrder
  colorSchemeId: SortOrder
  conference: SortOrder
  createdAt: SortOrder
  division: SortOrder
  established: SortOrder
  handle: SortOrder
  id: SortOrder
  logoId: SortOrder
  losses: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
  winPercentage: SortOrder
  wins: SortOrder
}

input TeamRelationFilter {
  is: TeamWhereInput
  isNot: TeamWhereInput
}

enum TeamScalarFieldEnum {
  abbreviation
  city
  colorSchemeId
  conference
  createdAt
  division
  established
  handle
  id
  logoId
  losses
  name
  slug
  updatedAt
  winPercentage
  wins
}

input TeamScalarWhereWithAggregatesInput {
  AND: [TeamScalarWhereWithAggregatesInput]
  NOT: [TeamScalarWhereWithAggregatesInput]
  OR: [TeamScalarWhereWithAggregatesInput]
  abbreviation: StringWithAggregatesFilter
  city: StringWithAggregatesFilter
  colorSchemeId: StringNullableWithAggregatesFilter
  conference: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  division: StringWithAggregatesFilter
  established: StringWithAggregatesFilter
  handle: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  logoId: StringNullableWithAggregatesFilter
  losses: IntNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  winPercentage: FloatNullableWithAggregatesFilter
  wins: IntNullableWithAggregatesFilter
}

type TeamSumAggregateOutputType {
  losses: Int
  winPercentage: Float
  wins: Int
}

input TeamUncheckedCreateInput {
  abbreviation: String!
  city: String!
  coaches: CoachUncheckedCreateNestedManyWithoutTeamInput
  colorSchemeId: String
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logoId: String
  losses: Int
  name: String!
  players: PlayerUncheckedCreateNestedManyWithoutTeamInput
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamUncheckedCreateNestedOneWithoutColorSchemeInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutColorSchemeInput
  create: TeamUncheckedCreateWithoutColorSchemeInput
}

input TeamUncheckedCreateNestedOneWithoutLogoInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutLogoInput
  create: TeamUncheckedCreateWithoutLogoInput
}

input TeamUncheckedCreateWithoutCoachesInput {
  abbreviation: String!
  city: String!
  colorSchemeId: String
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logoId: String
  losses: Int
  name: String!
  players: PlayerUncheckedCreateNestedManyWithoutTeamInput
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamUncheckedCreateWithoutColorSchemeInput {
  abbreviation: String!
  city: String!
  coaches: CoachUncheckedCreateNestedManyWithoutTeamInput
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logoId: String
  losses: Int
  name: String!
  players: PlayerUncheckedCreateNestedManyWithoutTeamInput
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamUncheckedCreateWithoutLogoInput {
  abbreviation: String!
  city: String!
  coaches: CoachUncheckedCreateNestedManyWithoutTeamInput
  colorSchemeId: String
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  losses: Int
  name: String!
  players: PlayerUncheckedCreateNestedManyWithoutTeamInput
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamUncheckedCreateWithoutPlayersInput {
  abbreviation: String!
  city: String!
  coaches: CoachUncheckedCreateNestedManyWithoutTeamInput
  colorSchemeId: String
  conference: String!
  createdAt: DateTime
  division: String!
  established: String!
  handle: String!
  id: String!
  logoId: String
  losses: Int
  name: String!
  slug: String!
  updatedAt: DateTime
  winPercentage: Float
  wins: Int
}

input TeamUncheckedUpdateInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  coaches: CoachUncheckedUpdateManyWithoutTeamInput
  colorSchemeId: NullableStringFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logoId: NullableStringFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  players: PlayerUncheckedUpdateManyWithoutTeamInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUncheckedUpdateManyInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  colorSchemeId: NullableStringFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logoId: NullableStringFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUncheckedUpdateOneWithoutColorSchemeInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutColorSchemeInput
  create: TeamUncheckedCreateWithoutColorSchemeInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUncheckedUpdateWithoutColorSchemeInput
  upsert: TeamUpsertWithoutColorSchemeInput
}

input TeamUncheckedUpdateOneWithoutLogoInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutLogoInput
  create: TeamUncheckedCreateWithoutLogoInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUncheckedUpdateWithoutLogoInput
  upsert: TeamUpsertWithoutLogoInput
}

input TeamUncheckedUpdateWithoutCoachesInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  colorSchemeId: NullableStringFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logoId: NullableStringFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  players: PlayerUncheckedUpdateManyWithoutTeamInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUncheckedUpdateWithoutColorSchemeInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  coaches: CoachUncheckedUpdateManyWithoutTeamInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logoId: NullableStringFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  players: PlayerUncheckedUpdateManyWithoutTeamInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUncheckedUpdateWithoutLogoInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  coaches: CoachUncheckedUpdateManyWithoutTeamInput
  colorSchemeId: NullableStringFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  players: PlayerUncheckedUpdateManyWithoutTeamInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUncheckedUpdateWithoutPlayersInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  coaches: CoachUncheckedUpdateManyWithoutTeamInput
  colorSchemeId: NullableStringFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logoId: NullableStringFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  coaches: CoachUpdateManyWithoutTeamInput
  colorScheme: ColorSchemeUpdateOneWithoutTeamInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logo: ImageUpdateOneWithoutTeamInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  players: PlayerUpdateManyWithoutTeamInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateManyMutationInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateOneWithoutCoachesInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutCoachesInput
  create: TeamUncheckedCreateWithoutCoachesInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUncheckedUpdateWithoutCoachesInput
  upsert: TeamUpsertWithoutCoachesInput
}

input TeamUpdateOneWithoutColorSchemeInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutColorSchemeInput
  create: TeamUncheckedCreateWithoutColorSchemeInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUncheckedUpdateWithoutColorSchemeInput
  upsert: TeamUpsertWithoutColorSchemeInput
}

input TeamUpdateOneWithoutLogoInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutLogoInput
  create: TeamUncheckedCreateWithoutLogoInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUncheckedUpdateWithoutLogoInput
  upsert: TeamUpsertWithoutLogoInput
}

input TeamUpdateOneWithoutPlayersInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutPlayersInput
  create: TeamUncheckedCreateWithoutPlayersInput
  delete: Boolean
  disconnect: Boolean
  update: TeamUncheckedUpdateWithoutPlayersInput
  upsert: TeamUpsertWithoutPlayersInput
}

input TeamUpdateWithoutCoachesInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  colorScheme: ColorSchemeUpdateOneWithoutTeamInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logo: ImageUpdateOneWithoutTeamInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  players: PlayerUpdateManyWithoutTeamInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutColorSchemeInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  coaches: CoachUpdateManyWithoutTeamInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logo: ImageUpdateOneWithoutTeamInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  players: PlayerUpdateManyWithoutTeamInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutLogoInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  coaches: CoachUpdateManyWithoutTeamInput
  colorScheme: ColorSchemeUpdateOneWithoutTeamInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  players: PlayerUpdateManyWithoutTeamInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUpdateWithoutPlayersInput {
  abbreviation: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  coaches: CoachUpdateManyWithoutTeamInput
  colorScheme: ColorSchemeUpdateOneWithoutTeamInput
  conference: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  division: StringFieldUpdateOperationsInput
  established: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  logo: ImageUpdateOneWithoutTeamInput
  losses: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  winPercentage: NullableFloatFieldUpdateOperationsInput
  wins: NullableIntFieldUpdateOperationsInput
}

input TeamUpsertWithoutCoachesInput {
  create: TeamUncheckedCreateWithoutCoachesInput!
  update: TeamUncheckedUpdateWithoutCoachesInput!
}

input TeamUpsertWithoutColorSchemeInput {
  create: TeamUncheckedCreateWithoutColorSchemeInput!
  update: TeamUncheckedUpdateWithoutColorSchemeInput!
}

input TeamUpsertWithoutLogoInput {
  create: TeamUncheckedCreateWithoutLogoInput!
  update: TeamUncheckedUpdateWithoutLogoInput!
}

input TeamUpsertWithoutPlayersInput {
  create: TeamUncheckedCreateWithoutPlayersInput!
  update: TeamUncheckedUpdateWithoutPlayersInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput]
  NOT: [TeamWhereInput]
  OR: [TeamWhereInput]
  abbreviation: StringFilter
  city: StringFilter
  coaches: CoachListRelationFilter
  colorScheme: ColorSchemeWhereInput
  colorSchemeId: StringNullableFilter
  conference: StringFilter
  createdAt: DateTimeFilter
  division: StringFilter
  established: StringFilter
  handle: StringFilter
  id: StringFilter
  logo: ImageWhereInput
  logoId: StringNullableFilter
  losses: IntNullableFilter
  name: StringFilter
  players: PlayerListRelationFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
  winPercentage: FloatNullableFilter
  wins: IntNullableFilter
}

input TeamWhereUniqueInput {
  abbreviation: String
  handle: String
  id: String
  name: String
  slug: String
}

type User {
  accounts(
    cursor: AccountWhereUniqueInput
    distinct: AccountScalarFieldEnum
    orderBy: AccountOrderByInput
    skip: Int
    take: Int
    where: AccountWhereInput
  ): [Account!]!
  apple: String
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String!
  image: String
  name: String
  sessions(
    cursor: SessionWhereUniqueInput
    distinct: SessionScalarFieldEnum
    orderBy: SessionOrderByInput
    skip: Int
    take: Int
    where: SessionWhereInput
  ): [Session!]!
  twitter: String
  updatedAt: DateTime!
}

type UserCountAggregateOutputType {
  _all: Int!
  apple: Int!
  createdAt: Int!
  email: Int!
  emailVerified: Int!
  facebook: Int!
  github: Int!
  google: Int!
  id: Int!
  image: Int!
  name: Int!
  twitter: Int!
  updatedAt: Int!
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  sessions: SessionCreateNestedManyWithoutUserInput
  twitter: String
  updatedAt: DateTime
}

input UserCreateManyInput {
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  twitter: String
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserUncheckedCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserUncheckedCreateWithoutSessionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserUncheckedCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
  create: UserUncheckedCreateWithoutSessionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  sessions: SessionCreateNestedManyWithoutUserInput
  twitter: String
  updatedAt: DateTime
}

input UserCreateWithoutSessionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  twitter: String
  updatedAt: DateTime
}

type UserMaxAggregateOutputType {
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  twitter: String
  updatedAt: DateTime
}

type UserMinAggregateOutputType {
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  twitter: String
  updatedAt: DateTime
}

input UserOrderByInput {
  apple: SortOrder
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  facebook: SortOrder
  github: SortOrder
  google: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  twitter: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  apple
  createdAt
  email
  emailVerified
  facebook
  github
  google
  id
  image
  name
  twitter
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  apple: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  facebook: StringNullableWithAggregatesFilter
  github: StringNullableWithAggregatesFilter
  google: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  twitter: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input UserUncheckedCreateInput {
  accounts: AccountUncheckedCreateNestedManyWithoutUserInput
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  sessions: SessionUncheckedCreateNestedManyWithoutUserInput
  twitter: String
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutAccountsInput {
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  sessions: SessionUncheckedCreateNestedManyWithoutUserInput
  twitter: String
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutSessionsInput {
  accounts: AccountUncheckedCreateNestedManyWithoutUserInput
  apple: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  facebook: String
  github: String
  google: String
  id: String
  image: String
  name: String
  twitter: String
  updatedAt: DateTime
}

input UserUncheckedUpdateInput {
  accounts: AccountUncheckedUpdateManyWithoutUserInput
  apple: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  google: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUncheckedUpdateManyWithoutUserInput
  twitter: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  apple: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  google: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutAccountsInput {
  apple: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  google: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUncheckedUpdateManyWithoutUserInput
  twitter: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutSessionsInput {
  accounts: AccountUncheckedUpdateManyWithoutUserInput
  apple: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  google: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserInput
  apple: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  google: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserInput
  twitter: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  apple: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  google: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserUncheckedCreateWithoutAccountsInput
  update: UserUncheckedUpdateWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserUncheckedCreateWithoutSessionsInput
  update: UserUncheckedUpdateWithoutSessionsInput
  upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateWithoutAccountsInput {
  apple: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  google: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserInput
  twitter: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutSessionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  apple: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  google: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
  create: UserUncheckedCreateWithoutAccountsInput!
  update: UserUncheckedUpdateWithoutAccountsInput!
}

input UserUpsertWithoutSessionsInput {
  create: UserUncheckedCreateWithoutSessionsInput!
  update: UserUncheckedUpdateWithoutSessionsInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  accounts: AccountListRelationFilter
  apple: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  facebook: StringNullableFilter
  github: StringNullableFilter
  google: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringNullableFilter
  sessions: SessionListRelationFilter
  twitter: StringNullableFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type VerificationRequest {
  createdAt: DateTime!
  expires: DateTime!
  id: String!
  identifier: String!
  token: String!
  updatedAt: DateTime!
}

type VerificationRequestCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  expires: Int!
  id: Int!
  identifier: Int!
  token: Int!
  updatedAt: Int!
}

input VerificationRequestCreateInput {
  createdAt: DateTime
  expires: DateTime!
  id: String
  identifier: String!
  token: String!
  updatedAt: DateTime
}

input VerificationRequestCreateManyInput {
  createdAt: DateTime
  expires: DateTime!
  id: String
  identifier: String!
  token: String!
  updatedAt: DateTime
}

input VerificationRequestIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

type VerificationRequestMaxAggregateOutputType {
  createdAt: DateTime
  expires: DateTime
  id: String
  identifier: String
  token: String
  updatedAt: DateTime
}

type VerificationRequestMinAggregateOutputType {
  createdAt: DateTime
  expires: DateTime
  id: String
  identifier: String
  token: String
  updatedAt: DateTime
}

input VerificationRequestOrderByInput {
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

enum VerificationRequestScalarFieldEnum {
  createdAt
  expires
  id
  identifier
  token
  updatedAt
}

input VerificationRequestScalarWhereWithAggregatesInput {
  AND: [VerificationRequestScalarWhereWithAggregatesInput]
  NOT: [VerificationRequestScalarWhereWithAggregatesInput]
  OR: [VerificationRequestScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  identifier: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input VerificationRequestUncheckedCreateInput {
  createdAt: DateTime
  expires: DateTime!
  id: String
  identifier: String!
  token: String!
  updatedAt: DateTime
}

input VerificationRequestUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VerificationRequestUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VerificationRequestUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VerificationRequestUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VerificationRequestWhereInput {
  AND: [VerificationRequestWhereInput]
  NOT: [VerificationRequestWhereInput]
  OR: [VerificationRequestWhereInput]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: StringFilter
  identifier: StringFilter
  token: StringFilter
  updatedAt: DateTimeFilter
}

input VerificationRequestWhereUniqueInput {
  id: String
  identifier_token: VerificationRequestIdentifierTokenCompoundUniqueInput
  token: String
}
