# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createPlayer(data: PlayerCreateInput!): Player
  createPlayers(data: [PlayerCreateInput!]!): [Player]
  updatePlayer(where: PlayerWhereUniqueInput!, data: PlayerUpdateInput!): Player
  updatePlayers(data: [PlayerUpdateArgs!]!): [Player]
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deletePlayers(where: [PlayerWhereUniqueInput!]!): [Player]
  createCoach(data: CoachCreateInput!): Coach
  createCoaches(data: [CoachCreateInput!]!): [Coach]
  updateCoach(where: CoachWhereUniqueInput!, data: CoachUpdateInput!): Coach
  updateCoaches(data: [CoachUpdateArgs!]!): [Coach]
  deleteCoach(where: CoachWhereUniqueInput!): Coach
  deleteCoaches(where: [CoachWhereUniqueInput!]!): [Coach]
  createColorScheme(data: ColorSchemeCreateInput!): ColorScheme
  createColorSchemes(data: [ColorSchemeCreateInput!]!): [ColorScheme]
  updateColorScheme(
    where: ColorSchemeWhereUniqueInput!
    data: ColorSchemeUpdateInput!
  ): ColorScheme
  updateColorSchemes(data: [ColorSchemeUpdateArgs!]!): [ColorScheme]
  deleteColorScheme(where: ColorSchemeWhereUniqueInput!): ColorScheme
  deleteColorSchemes(where: [ColorSchemeWhereUniqueInput!]!): [ColorScheme]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Team {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  slug: String
  city: String
  abbreviation: String
  conference: String
  division: String
  established: String
  wins: Int
  losses: Int
  winPercentage: Float
  players(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  playersCount(where: PlayerWhereInput! = {}): Int
  coaches(
    where: CoachWhereInput! = {}
    orderBy: [CoachOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Coach!]
  coachesCount(where: CoachWhereInput! = {}): Int
  colorScheme: ColorScheme
  logo: Image
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TeamWhereUniqueInput {
  id: ID
  name: String
  handle: String
  slug: String
  abbreviation: String
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  handle: StringFilter
  slug: StringFilter
  city: StringFilter
  abbreviation: StringFilter
  conference: StringFilter
  division: StringFilter
  established: StringFilter
  wins: IntNullableFilter
  losses: IntNullableFilter
  winPercentage: FloatNullableFilter
  players: PlayerManyRelationFilter
  coaches: CoachManyRelationFilter
  colorScheme: ColorSchemeWhereInput
  logo: ImageWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input PlayerManyRelationFilter {
  every: PlayerWhereInput
  some: PlayerWhereInput
  none: PlayerWhereInput
}

input CoachManyRelationFilter {
  every: CoachWhereInput
  some: CoachWhereInput
  none: CoachWhereInput
}

input TeamOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  slug: OrderDirection
  city: OrderDirection
  abbreviation: OrderDirection
  conference: OrderDirection
  division: OrderDirection
  established: OrderDirection
  wins: OrderDirection
  losses: OrderDirection
  winPercentage: OrderDirection
}

input TeamUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  slug: String
  city: String
  abbreviation: String
  conference: String
  division: String
  established: String
  wins: Int
  losses: Int
  winPercentage: Float
  players: PlayerRelateToManyForUpdateInput
  coaches: CoachRelateToManyForUpdateInput
  colorScheme: ColorSchemeRelateToOneForUpdateInput
  logo: ImageRelateToOneForUpdateInput
}

input PlayerRelateToManyForUpdateInput {
  disconnect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
}

input CoachRelateToManyForUpdateInput {
  disconnect: [CoachWhereUniqueInput!]
  set: [CoachWhereUniqueInput!]
  create: [CoachCreateInput!]
  connect: [CoachWhereUniqueInput!]
}

input ColorSchemeRelateToOneForUpdateInput {
  create: ColorSchemeCreateInput
  connect: ColorSchemeWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  slug: String
  city: String
  abbreviation: String
  conference: String
  division: String
  established: String
  wins: Int
  losses: Int
  winPercentage: Float
  players: PlayerRelateToManyForCreateInput
  coaches: CoachRelateToManyForCreateInput
  colorScheme: ColorSchemeRelateToOneForCreateInput
  logo: ImageRelateToOneForCreateInput
}

input PlayerRelateToManyForCreateInput {
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
}

input CoachRelateToManyForCreateInput {
  create: [CoachCreateInput!]
  connect: [CoachWhereUniqueInput!]
}

input ColorSchemeRelateToOneForCreateInput {
  create: ColorSchemeCreateInput
  connect: ColorSchemeWhereUniqueInput
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type Player {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  slug: String
  height: String
  weight: String
  number: String
  position: String
  team: Team
  image: Image
}

input PlayerWhereUniqueInput {
  id: ID
  name: String
  handle: String
  slug: String
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  handle: StringFilter
  slug: StringFilter
  height: StringFilter
  weight: StringFilter
  number: StringFilter
  position: StringFilter
  team: TeamWhereInput
  image: ImageWhereInput
}

input PlayerOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  slug: OrderDirection
  height: OrderDirection
  weight: OrderDirection
  number: OrderDirection
  position: OrderDirection
}

input PlayerUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  slug: String
  height: String
  weight: String
  number: String
  position: String
  team: TeamRelateToOneForUpdateInput
  image: ImageRelateToOneForUpdateInput
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input PlayerUpdateArgs {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateInput!
}

input PlayerCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  slug: String
  height: String
  weight: String
  number: String
  position: String
  team: TeamRelateToOneForCreateInput
  image: ImageRelateToOneForCreateInput
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

type Coach {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  type: String
  isAssistant: String
  team: Team
  image: Image
}

input CoachWhereUniqueInput {
  id: ID
  name: String
  handle: String
}

input CoachWhereInput {
  AND: [CoachWhereInput!]
  OR: [CoachWhereInput!]
  NOT: [CoachWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  handle: StringFilter
  type: StringFilter
  isAssistant: StringFilter
  team: TeamWhereInput
  image: ImageWhereInput
}

input CoachOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  type: OrderDirection
  isAssistant: OrderDirection
}

input CoachUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  type: String
  isAssistant: String
  team: TeamRelateToOneForUpdateInput
  image: ImageRelateToOneForUpdateInput
}

input CoachUpdateArgs {
  where: CoachWhereUniqueInput!
  data: CoachUpdateInput!
}

input CoachCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  handle: String
  type: String
  isAssistant: String
  team: TeamRelateToOneForCreateInput
  image: ImageRelateToOneForCreateInput
}

type ColorScheme {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  primary: String
  secondary: String
  team(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  teamCount(where: TeamWhereInput! = {}): Int
}

input ColorSchemeWhereUniqueInput {
  id: ID
}

input ColorSchemeWhereInput {
  AND: [ColorSchemeWhereInput!]
  OR: [ColorSchemeWhereInput!]
  NOT: [ColorSchemeWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  primary: StringFilter
  secondary: StringFilter
  team: TeamManyRelationFilter
}

input TeamManyRelationFilter {
  every: TeamWhereInput
  some: TeamWhereInput
  none: TeamWhereInput
}

input ColorSchemeOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  primary: OrderDirection
  secondary: OrderDirection
}

input ColorSchemeUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  primary: String
  secondary: String
  team: TeamRelateToManyForUpdateInput
}

input TeamRelateToManyForUpdateInput {
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input ColorSchemeUpdateArgs {
  where: ColorSchemeWhereUniqueInput!
  data: ColorSchemeUpdateInput!
}

input ColorSchemeCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  primary: String
  secondary: String
  team: TeamRelateToManyForCreateInput
}

input TeamRelateToManyForCreateInput {
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

type Image {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  url: String
  type: String
  player: Player
  coach: Coach
  team: Team
}

input ImageWhereUniqueInput {
  id: ID
  url: String
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  url: StringFilter
  type: StringNullableFilter
  player: PlayerWhereInput
  coach: CoachWhereInput
  team: TeamWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  url: OrderDirection
  type: OrderDirection
}

input ImageUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  url: String
  type: String
  player: PlayerRelateToOneForUpdateInput
  coach: CoachRelateToOneForUpdateInput
  team: TeamRelateToOneForUpdateInput
}

input PlayerRelateToOneForUpdateInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
  disconnect: Boolean
}

input CoachRelateToOneForUpdateInput {
  create: CoachCreateInput
  connect: CoachWhereUniqueInput
  disconnect: Boolean
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  url: String
  type: String
  player: PlayerRelateToOneForCreateInput
  coach: CoachRelateToOneForCreateInput
  team: TeamRelateToOneForCreateInput
}

input PlayerRelateToOneForCreateInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
}

input CoachRelateToOneForCreateInput {
  create: CoachCreateInput
  connect: CoachWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  players(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  player(where: PlayerWhereUniqueInput!): Player
  playersCount(where: PlayerWhereInput! = {}): Int
  coaches(
    where: CoachWhereInput! = {}
    orderBy: [CoachOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Coach!]
  coach(where: CoachWhereUniqueInput!): Coach
  coachesCount(where: CoachWhereInput! = {}): Int
  colorSchemes(
    where: ColorSchemeWhereInput! = {}
    orderBy: [ColorSchemeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ColorScheme!]
  colorScheme(where: ColorSchemeWhereUniqueInput!): ColorScheme
  colorSchemesCount(where: ColorSchemeWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
